var searchIndex = JSON.parse('{\
"linkspace":{"doc":"Linkspace ","t":"NCGGNRRCCDALLLLAALLLLLLACCCCCCCCCCCCCCCCCCCAAALLAALCLLLLALHAFFFFHDDMLLLLLLFFLFLLLLLLLLLLLFMLLLLLLLLLHRRRRRRRRRRRRRRRRRRRRHHHHHFADRLLLLLMLLMMLLFFFFFMMFFLLLLLFFFFFNHNNNNENSNDNNNDNDDDNNNNNNNNNNNDNNNNNNNLMLLLLLFLLLLLLLLLLLLLLLLMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMLLLLLLLALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLFFFFFFFFFFDSDNNNNSSSSNGSSSSNGNNNNNNSNSSSSDGNNNNDIDGIDDDNEDIIDNGGNGGGSSNIDGNGEGGNNNNFLLLFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLFLLLALLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLKLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLMMLLKLLLLLLLLFLLLLLLKLLLLLLLLLLLLLKLLLMKLLLLKLLLMMKLKLLLMLLLLLFFLLLLLLLLLLFFLKLLLLLFLMLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMIDDDDSSSSSSSSQNEDDDDDSSSSSSSSLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMSNNNNNNNNNNNNENNNNENNHNDNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFLLLLLLLLLLLLLLLLLLLDDLLLLALLMLLLLLLLFFFFFFFFFFFFFFFLLLLLLLFLLNDNNINELLLLFLLLLKLMLLLLFKLMLFLLLLLLLLFFFF","n":["Err","Linkspace","LkError","LkResult","Ok","PRIVATE","PUBLIC","Q","Query","SigningKey","abe","borrow","borrow_mut","clone","clone_into","consts","conventions","fmt","from","generate","generate_with","into","into_result","key","lk_datapoint","lk_encode","lk_eval","lk_get","lk_key","lk_keypoint","lk_linkpoint","lk_open","lk_process","lk_process_while","lk_pull","lk_query","lk_query_parse","lk_query_print","lk_query_push","lk_save","lk_stop","lk_tokenize_abe","lk_watch","misc","point","prelude","pubkey","pubkey_bytes","query","runtime","to_owned","try_cb","try_from","try_from","try_into","type_id","varctx","vzip","DEFAULT_PKT","ctx","lk_encode","lk_eval","lk_tokenize_abe","lk_try_encode","LK_EVAL_CTX_RT","LkCtx","UserData","argv","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","core_ctx","ctx","default","empty_ctx","from","from","from","from","from","from","from","into","into","into_result","into_result","lk_ctx","pkt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EXCHANGE_DOMAIN","MAX_CONTENT_SIZE","MAX_DATA_SIZE","MAX_KEYPOINT_DATA_SIZE","MAX_LINKPOINT_DATA_SIZE","MAX_LINKS_LEN","MAX_NETPKT_SIZE","MAX_NETPKT_U16SIZE","MAX_POINT_SIZE","MAX_ROOTED_SPACENAME_SIZE","MAX_SPACENAME_COMPONENT_SIZE","MAX_SPACENAME_SIZE","MAX_SPACE_DEPTH","MIN_LINKPOINT_SIZE","MIN_NETPKT_SIZE","MIN_POINT_SIZE","PRIVATE","PRIVATE","PUBLIC","PUBLIC","PUBLIC_GROUP_B64","PUBLIC_GROUP_PKT","SINGLE_LINK_PKT","TEST_GROUP","TEST_GROUP","TEST_GROUP_PKT","lk_pull","status","LkStatus","STATUS_SPACE","borrow","borrow_mut","clone","clone_into","default","domain","fmt","from","group","instance","into","into_result","is_status_reply","lk_status_overwatch","lk_status_poll","lk_status_request","lk_status_set","objtype","qid","testu32","testu8","to_owned","try_from","try_into","type_id","vzip","lk_key","lk_key_decrypt","lk_key_encrypt","lk_key_pubkey","lk_keygen","CreateF","DEFAULT_ROUTING_BITS","DataF","DataSizeF","DepthF","DomainF","FieldEnum","GroupIDF","LIST","LinksLenF","PktCmp","PktHashF","PktTypeF","PubKeyF","QuickDedup","RSpaceNameF","RecvPkt","ReroutePkt","ShareArcPkt","SignatureF","SizeF","SpaceComp0F","SpaceComp1F","SpaceComp2F","SpaceComp3F","SpaceComp4F","SpaceComp5F","SpaceComp6F","SpaceComp7F","SpaceNameF","TreeEntry","VarHopF","VarNetFlagsF","VarStampF","VarUBits0F","VarUBits1F","VarUBits2F","VarUBits3F","abe","arc","as_netarc","as_netbox","as_point","as_point","as_point","blake3_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_arc","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_key","btree_key","byte_segments","byte_segments","byte_segments","bytes","bytes2uniform","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","create","data","data","data","data_size","deref","deref","deref","deserialize","deserialize","display","eq","eq","eq","equivalent","equivalent","fixed_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_db","from_dyn","from_pkt","from_str","hash","hash","hash_ref","hash_ref","hash_ref","info","into","into","into","into","into","into","into","into_abe","into_result","into_result","into_result","into_result","into_result","into_result","into_result","linkpoint_header","linkpoint_header","linkpoint_header","links_len","local_log_ptr","map","mut_route","net_header","net_header_mut","net_header_ref","net_header_ref","net_header_ref","new","new","new","owned","padding","padding","padding","partial_cmp","partial_cmp","parts","parts","parts","pkt","pkt","pkt","pkt_segments","pkt_segments","pkt_segments","point_header_ref","point_header_ref","point_header_ref","probable_contains","read","recv","recv","recv","recv","serialize","serialize","signed","signed","signed","tail","tail","tail","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_id","try_from_name","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_abe","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","vzip","vzip","vzip","vzip","vzip","vzip","vzip","read_pkt","lk_datapoint","lk_datapoint_ref","lk_keypoint","lk_keypoint_ref","lk_linkpoint","lk_linkpoint_ref","lk_read","lk_read_unchecked","lk_write","AB","ALWAYS_ZERO","B64","BadOffset","CapacityError","ComponentSize","ContentLen","DATA","DATA_POINT","DEFAULT","DONT_FORWARD","DataOffsetIncompatible","Domain","EMPTY","EMPTY","ERROR","ERROR_POINT","EmptyComponentIdx","GroupID","HashMismatch","HeaderReservedSet","ISPOffsetIncompatible","IndivisableLinkbytes","InvalidPktDataLength","InvalidSignature","KEY_POINT","KeyPointLength","LINK","LINKED_IN_FUTURE_PKT","LINKED_IN_PREVIOUS_PKT","LINK_POINT","Link","LkHash","MaxDepth","MissingBytes","MissingHeader","MissingIdx","NetFlags","NetPkt","NetPktArc","NetPktBox","NetPktExt","NetPktHeader","NetPktParts","NetPktPtr","PaddingBitsNotU8Max","PktError","PktFmt","Point","PointExt","PointTypeFlags","PrivateGroup","PubKey","RecvPktPtr","ReservedBitsSet","RootedSpace","RootedSpaceBuf","RootedStaticSpace","SIGNATURE","SILENT","SignedInvalidPkt","SigningExt","SigningKey","Space","Space","SpaceBuf","SpaceError","Stamp","Tag","TailLength","TailLength","UnknownPktType","ZeroComponent","ab","all","all","and_flags","as_abtxt_c","as_be_bytes","as_be_bytes","as_bytes","as_datapoint","as_keypoint","as_linkpoint","as_mut_sized","as_netarc","as_netarc","as_netarc","as_netbox","as_netbox","as_netparts","as_netpkt_bytes","as_point","as_point","as_point","as_point","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref_cut","as_rules","as_sized","as_str","as_str","b64","b64_into","b64_mini","bit_and","bit_and","bit_or","bit_or","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_segments","byte_segments","byte_segments","byte_segments","cfrom","check","check","check","check","check_private","checked_add","checked_add","checked_sub","checked_sub","cinto","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","complement","complement","compute_hash","contains","contains","create_stamp","cut_prefix_nulls","data","data","data","data","decr","decr","default","default","default","depth","deref","deref","deref","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difference","difference","domain","domain","empty","empty","endian_types","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","fields","fields","flags","flags_u8","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bytes_unchecked","from_header_and_copy","from_iter","from_iter","from_name","from_name","from_raw_arc","from_ref","from_ref","from_str","from_str","from_str","from_u128","from_u256","from_unchecked","get_create_stamp","get_data_str","get_depth","get_domain","get_field","get_group","get_links","get_pubkey","get_recv","get_rooted_spacename","get_signature","get_spacename","group","group","hash","hash","hash","hash","hash_ref","hash_ref","hash_ref","hash_ref","hop","hop","inc","inc","inner","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_iter","into_iter","into_raw_arc","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","io","is_all","is_all","is_datapoint","is_empty","is_empty","is_keypoint","is_linkpoint","is_valid_bit_pattern","is_valid_bit_pattern","iter","iter","iter_names","iter_names","leading_ones","leading_ones","leading_zeros","leading_zeros","linkpoint_header","linkpoint_header","linkpoint_header","linkpoint_header","links","mut_flags_u8","net_header","net_header","net_header","net_header_mut","net_header_mut","net_header_ref","net_header_ref","net_header_ref","net_header_ref","new","not","not","not","not","now","overflowing_add","overflowing_add","overflowing_shl","overflowing_shl","overflowing_shr","overflowing_shr","padding","padding","padding","padding","parse","parse_abtxt","parse_ctx","parse_str","parse_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","parts","parts","parts","parts","pkt","pkt_segments","pkt_segments","pkt_segments","pkt_segments","point_header","point_header_ref","point_header_ref","point_header_ref","point_header_ref","prefix","ptr","pubkey","pubkey","recv","recv","recv","recv","recv","remove","remove","requires_more","reroute","rooted_spacename","rspace1","rspace_buf","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set_domain","set_group","signature","signed","signed","signed","signed","size","source","space_buf","spacename","stamp","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","tag","tail","tail","tail","tail","test","thin_arc","to_abe","to_abe_str","to_abe_str","to_default_str","to_html","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u128","to_u256","toggle","toggle","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","try_ab","try_fit_byte_slice","try_fit_bytes_or_b64","try_fit_slice","try_fit_slice_filled","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_utf8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ubits","uint","uint","uint","uint","unchecked_from","union","union","utf8","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_flags","write_abe","write_abe","netpkt_size","BigEndianUInt","LU128","LU16","LU32","LU64","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","Native","Overflow","TryFitSliceError","U128","U16","U32","U64","U8","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abe_bits","align","align","align","align","align","align","align","align","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","binary_fmt_slice","binary_str","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","incr","incr","incr","incr","incr","incr","incr","incr","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","lu_abe","lu_abe","lu_abe","lu_abe","new","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_fit_slice","try_fit_slice","try_fit_slice","try_fit_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","got","max","ALL","Create","DataSize","Depth","Domain","Follow","Group","Hash","Hop","I","IBranch","IDb","INew","KnownOptions","LinksLen","Mode","Netflags","NotifyClose","PredicateType","Prefix","Pubkey","Q","Qid","Query","Recv","Size","Spacename","Stamp","Type","Ubits0","Ubits1","Ubits2","Ubits3","as_bytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","info","into","into","into","into_result","into_result","into_result","iter_all","lk_hash_query","lk_query","lk_query_clear","lk_query_compile","lk_query_parse","lk_query_print","lk_query_push","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from_id","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Linkspace","LkInfo","borrow","borrow","borrow_mut","borrow_mut","cb","clone","clone_into","dir","fmt","from","from","into","into","into_result","into_result","lk_get","lk_get_all","lk_get_hash","lk_get_ref","lk_info","lk_list_watches","lk_open","lk_process","lk_process_while","lk_save","lk_save_all","lk_save_all_ext","lk_stop","lk_watch","lk_watch2","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vspan","vzip","vzip","Break","Cb","Closed","Finish","PktHandler","Replaced","StopReason","borrow","borrow","borrow_mut","borrow_mut","cb","clone","clone_into","from","from","handle_pkt","handle_pkt","handle_pkt","into","into","into_result","into_result","nop_stopped","stopped","stopped","stopped","to_owned","try_cb","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","lk_eval","lk_key","lk_query_parse","lk_try_encode"],"q":[[0,"linkspace"],[58,"linkspace::abe"],[64,"linkspace::abe::ctx"],[100,"linkspace::consts"],[126,"linkspace::conventions"],[128,"linkspace::conventions::status"],[156,"linkspace::key"],[161,"linkspace::misc"],[388,"linkspace::misc::read"],[389,"linkspace::point"],[398,"linkspace::prelude"],[1023,"linkspace::prelude::PktError"],[1024,"linkspace::prelude::endian_types"],[1475,"linkspace::prelude::endian_types::TryFitSliceError"],[1477,"linkspace::query"],[1568,"linkspace::runtime"],[1610,"linkspace::runtime::cb"],[1647,"linkspace::varctx"],[1651,"core::fmt"],[1652,"core::fmt"],[1653,"rand_core"],[1654,"rand_core"],[1655,"core::any"],[1656,"alloc::string"],[1657,"core::convert"],[1658,"alloc::vec"],[1659,"core::convert"],[1660,"core::option"],[1661,"core::fmt"],[1662,"std::io"],[1663,"core::marker"],[1664,"linkspace_pkt::netpkt::netpkt_ptr"],[1665,"alloc::alloc"],[1666,"alloc::boxed"],[1667,"linkspace_pkt::netpkt::netpkt_arc"],[1668,"linkspace_pkt::netpkt::tree_order"],[1669,"linkspace_pkt::byte_segments"],[1670,"core::clone"],[1671,"core::cmp"],[1672,"serde::de"],[1673,"serde::de"],[1674,"core::fmt"],[1675,"linkspace_pkt::field_ids"],[1676,"linkspace_pkt::point"],[1677,"core::ops::function"],[1678,"linkspace_pkt::point"],[1679,"serde::ser"],[1680,"abe::ast"],[1681,"alloc::borrow"],[1682,"std::io::error"],[1683,"core::borrow"],[1684,"abe::ast"],[1685,"core::iter::traits::collect"],[1686,"linkspace_pkt::point_parts"],[1687,"linkspace_pkt::netpkt::header"],[1688,"linkspace_pkt::netpkt::partial"],[1689,"core::str::error"],[1690,"linkspace_core::predicate::exprs"],[1691,"linkspace_pkt::rooted_space"],[1692,"linkspace_pkt::space"],[1693,"core::hash"],[1694,"bitflags::iter"],[1695,"abe::abtxt"],[1696,"byte_fmt"],[1697,"base64::decode"],[1698,"linkspace_pkt::eval"],[1699,"core::error"],[1700,"core::fmt"],[1701,"linkspace_core::predicate::predicate_type"],[1702,"anyhow"],[1703,"linkspace_core::matcher"],[1704,"tracing::span"],[1705,"core::ops::control_flow"]],"d":["Contains the error value","","","","Contains the success value","","","","","","ascii byte expression utilities","","","","","","A set of functions that adhere to conventions","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions with a custom eval context","","default fmt in many cases and output for <code>[pkt]</code>","Custom context for use in varctx","encode bytes as an abe that evaluate back to bytes.","Evaluate an expression and return the bytes","An abe parser. Useful to split a cli argument like ’…","lk_encode with Err on:","","Create a new context for use in crate::varctx with …","User config for setting additional context to evaluation.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","pull requests are saved here.","","","","","","","","","","","","","","","","","","","","","","","","","","pull requests create a linkpoint in [f:exchange]:[#:0…","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","A query that returns both requests and updates","","A query that returns both requests and updates","Insert a callback that is triggered on a request. Must …","","","","","","","","","","linkspace stored identity","","","read the public key from a lk_key_encrypt string","","","A thread local default net header value when creating new …","","","","","An enum that provides access to the fields in a NetPkt","","","","A newtype around any T:NetPkt that implements Eq (and …","","","","Extremely light best-effort deduplication. ","","Wrapper around a NetPkt that sets its recv field","Wrapper around a netpkt with a mutable NetHeader","Wrapper around a NetPkt that ensures .as_netarc() is only …","","","","","","","","","","","","‘tree’ index order is a Ord of NetPkts defined by the …","","","","","","","","","","","","","","","Blake3 hash","","","","","","","","","","","","","","","","","","","","","This always returns something even if the field doesn’t …","Read bytes as a [0,1) float by reading the first 52 bits. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create a datapoint with upto MAX_CONTENT_SIZE bytes","","create a keypoint, i.e. a signed lk_linkpoint","","create a new linkpoint NetPktBox","","","","","newtype around bytes to print/parse [abe] text","","newtype around bytes to print/parse b64 (url-safe …","","","","","","","","Request that this packet is not forwarded","","Alias for <code>AB&lt;[u8;16]&gt;</code>","","Indicate that the chances of anybody interested in this …","","","","Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","","","","","","","","","A Tag and LkHash ","Blake3 hash of the packet content. Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","Variable flags used in transit","A trait to access fields of a net pkt. Auto impls NetPktExt…","Arc around the byte repr NetPkt","Heap allocated repr of a NetPkt.","Utilities for NetPkt","Variable fields in a crate::NetPkt used in point exchange","Rust enum repr of a NetPkt","Byte repr of a NetPkt","","","A static packet formatter similar to DEFAULT_PKT without …","General trait for accessing point field.","Directly access a Point’s domain, group, links, …","Pkt flag indicating its type.","","Taproot Schnorr publickey. Alias for <code>B64&lt;[u8;32]&gt;</code>","","","","","","","Indicate that the chances of anybody interested in this …","","","","Explicitly Space bytes (analogous to [str])","","Owned Space bytes (analogous to String)","","A Big endian u64 of microseconds since EPOCH","Alias for <code>AB&lt;[u8;16]&gt;</code>","","","","","copy <code>val</code> into array of N bytes prepending 0’s as needed. …","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","Get the underlying bits value.","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","","","","","","","","","","","DEFAULT_ROUTING_BITS","","","","","","","","","","","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","[Thread Local]: get the ‘default’ domain. from …","","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","Safety","Safety","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Safety","","","","","","","","The caller must ensure PktHash matches the Pkt","","","","","","","","","see NetPkt::recv","","","","[Thread Local]: get the ‘default’ group. from set_group…","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","","","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","","","Return a LinkPointHeader, works for both key and link …","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","current time as big endian u64 microseconds since epoch","","","","","","","Points are padded with upto 7 \\\\xFF bytes and are u64 …","","","","","","","","","","","","","","The rusty enum repr of a point.","","","","","A utility function to translate this format into bytes for …","","","","","","","","","","Usually a LkHash, sometimes a PubKey or GroupID","","","recv is somewhat special. It depends on the context. …","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","","","","","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","set the result for domain","","","","","","","Padded size ","","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","create a html fragment describing the packet","","","","","","","","","","","","","","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Self::utf8 but fallback to abtxt","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags valueseturns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code“create”","“data_size”","“depth”","“domain”","try and also return the linked packets.","“group”","“hash”","“hop”","“i”","“i_branch”","“i_db”","“i_new”","","“links_len”","which index to walk when reading from the database","“netflags”","(not supported by lk_watch) - append the request on finish …","A list of all supported query predicates","“prefix”","“pubkey”","","The arg is the query id under which to operate. Can be …","A set of predicates and options used to select packets","“recv”","“size”","“spacename”","“stamp”","“type”","“ubits0”","“ubits1”","“ubits2”","“ubits3”","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new Query specifically for a hash. Sets the right …","Create a new Query. Copy from a template. Q is the empty …","Clear a Query for reuse","Compile a Query into a function which tests packets to …","Add multiple ABE encoded statements to a Query","Get the string representation of a Query","Add a single statement to a Query, potentially skipping an …","","","","","","","","","","","","","","","","","","","","The linkspace runtime.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","get the first result from the database matching the query.","Run callback for every match for the query in the database.","read a single packet from the database by its hash without …","read a single packet directly without copying. This means …","","","open a linkspace runtime.","process the log of new packets and trigger callbacks. …","continuously process callbacks until:","save a packet. Returns true if new and false if its old.","","returns the range of recv stampes used to save new …","close lk_watch watches based on the query id ‘…","Registers the query under its ‘qid’ ( .e.g. set by …","lk_watch with a custom log tracing::Span The span will be …","","","","","","","","See lk_watch2","","","","","","","Callbacks stored in a Linkspace instance. use [runtime::cb]…","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handles an event.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Called when break, finished, or replaced","","","","","","","","","","","","","[crate::lk_eval] with a custom context.","","custom ctx version of super::lk_query_parse",""],"i":[19,0,0,0,19,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,20,23,20,23,20,20,20,0,0,20,0,23,20,20,20,20,20,20,23,20,23,20,0,20,20,23,20,23,20,23,20,23,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,0,29,29,0,0,29,29,29,29,29,0,0,0,0,0,39,0,39,39,39,39,0,39,39,39,0,39,39,39,0,39,0,0,0,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,39,39,39,42,42,45,45,50,42,0,72,39,45,50,42,57,52,42,72,39,45,50,42,57,52,52,52,45,50,42,39,0,39,45,50,42,57,52,39,45,50,42,57,52,57,52,45,50,42,52,45,50,42,57,52,39,39,57,52,39,57,39,39,39,45,50,42,57,52,52,72,39,45,50,50,42,57,52,52,50,52,39,57,52,45,50,42,39,72,39,45,50,42,57,52,39,72,39,45,50,42,57,52,45,50,42,52,52,50,39,45,45,45,50,42,72,45,42,50,45,50,42,57,52,45,50,42,45,50,42,45,50,42,45,50,42,72,0,45,50,42,50,57,52,45,50,42,45,50,42,39,45,50,42,57,52,52,39,52,72,39,45,50,42,57,52,39,39,72,39,45,50,42,57,52,39,72,39,45,50,42,57,52,52,72,39,45,50,42,57,52,0,0,0,0,0,0,0,0,0,0,0,89,0,96,96,96,82,90,90,86,89,82,0,71,90,90,90,96,0,82,82,82,82,82,82,90,82,90,89,89,90,0,0,96,82,82,96,0,0,0,0,0,0,0,0,82,0,0,0,0,0,82,0,0,82,0,0,0,90,89,82,0,0,0,82,0,0,0,0,96,82,82,96,0,89,90,71,0,88,10,71,143,143,143,32,32,43,24,43,24,144,32,24,32,43,83,88,88,10,10,10,88,90,32,88,90,10,10,10,88,10,88,10,89,90,89,90,89,90,89,90,89,89,90,90,10,89,90,89,90,32,101,88,88,10,10,71,89,43,43,83,96,86,90,82,32,101,88,10,71,89,43,83,96,86,90,82,24,32,43,83,71,32,88,10,86,143,88,10,88,10,71,88,10,71,89,43,83,96,86,90,82,88,10,71,89,43,83,96,86,90,82,88,10,89,86,90,89,90,143,89,90,143,88,49,32,43,83,88,10,88,10,71,143,32,88,10,43,83,88,10,88,10,89,43,86,90,89,90,0,143,89,90,0,88,10,71,89,83,96,86,90,88,10,71,89,86,90,89,90,49,143,71,71,32,101,101,88,88,10,10,71,71,89,89,89,89,89,43,83,96,96,86,86,90,90,90,90,90,90,82,82,32,101,88,88,88,88,88,10,10,10,10,10,10,71,71,71,89,43,43,43,83,83,96,86,86,90,82,82,89,90,89,89,90,90,89,90,32,43,89,90,89,90,43,88,10,88,88,10,88,10,83,143,143,143,143,90,143,143,143,144,143,143,143,0,143,144,88,10,86,24,32,43,83,71,71,88,10,10,89,90,89,90,89,90,32,32,101,88,10,71,89,43,83,96,86,90,82,10,89,90,43,32,101,88,10,71,89,43,83,96,86,90,82,82,89,90,143,89,90,143,143,88,10,89,90,89,90,88,10,88,10,49,32,43,83,143,71,144,32,83,32,24,24,32,43,83,86,88,10,89,90,0,88,10,88,10,88,10,49,32,43,83,88,88,88,10,10,88,10,89,86,90,49,32,43,83,145,49,32,43,83,143,49,32,43,83,71,86,146,143,24,32,43,83,145,89,90,82,32,143,0,0,143,32,88,10,89,43,86,90,89,90,0,0,143,49,32,43,83,144,82,0,143,71,89,90,89,90,89,90,86,49,32,43,83,90,43,71,88,10,144,101,32,88,10,71,89,43,83,96,86,90,82,101,101,88,10,71,96,86,90,82,88,10,89,90,88,10,88,10,0,88,10,10,88,32,101,88,88,88,10,10,10,71,89,43,83,96,86,86,86,86,90,82,32,101,88,10,71,89,43,83,96,86,90,82,88,32,101,88,10,71,89,43,83,96,86,90,82,71,88,88,88,88,90,89,90,88,32,101,88,10,71,89,43,83,96,86,90,82,71,88,10,147,0,0,0,0,0,60,122,59,123,125,126,127,128,148,129,0,0,0,0,0,0,60,122,59,123,125,126,127,128,124,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,0,0,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,124,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,124,60,122,59,123,125,126,127,128,124,60,60,60,122,122,122,59,59,59,123,123,123,125,125,125,126,126,126,127,127,127,128,128,128,129,129,124,60,60,60,60,122,122,122,122,59,59,59,59,123,123,123,123,125,125,125,125,126,126,126,126,127,127,127,127,128,128,128,128,129,124,124,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,60,60,122,122,122,59,59,59,123,123,123,125,125,125,126,126,126,127,127,127,128,128,128,129,124,60,122,59,123,125,126,127,128,129,124,125,126,127,128,60,122,59,123,125,126,127,128,124,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,124,60,122,59,123,125,126,127,128,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,129,125,126,127,128,60,60,60,122,122,122,59,59,59,123,123,123,125,125,125,126,126,126,127,127,127,128,128,128,129,124,124,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,129,124,60,122,59,123,125,126,127,128,129,124,149,149,131,131,131,131,131,130,131,131,131,131,131,131,131,0,131,130,131,130,0,131,131,0,130,0,131,131,131,131,131,131,131,131,131,130,27,131,130,27,131,130,27,131,130,27,131,130,131,131,27,131,131,130,27,131,130,131,130,131,27,131,130,27,131,130,130,0,0,0,0,0,0,0,27,131,130,27,131,130,27,131,130,131,27,131,130,27,131,130,27,131,130,0,0,25,133,25,133,0,25,25,133,133,25,133,25,133,25,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,133,25,133,25,133,0,25,133,142,0,142,142,0,142,0,140,142,140,142,0,140,140,140,142,34,140,140,140,142,140,142,0,34,140,140,140,0,140,142,140,142,140,142,140,142,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,0,[[1,3],[[5,[2,4]]]],[-1,-1,[]],[[],1],[-1,1,[6,7]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[10,[[9,[8]]]]]],[1,[[9,[8]]]],0,0,[-1,-2,[],[]],0,[-1,[[5,[-2]]],[],[]],[[[9,[8]]],[[5,[1,11]]]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],0,0,[[-1,13],14,[[16,[[15,[8]]]]]],[[13,-1,17],[[19,[[18,[8]]]]],[[21,[20]]]],[[13,[15,[8]],-1],[[19,[2]]],22],[[-1,13,17],[[19,[14]]],[[16,[[15,[8]]]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[[-1,-2],2,[],[]],[[],23],[20,[[19,[23]]]],[[],20],[[],23],[-1,-1,[]],[[[9,[[15,[8]]]]],20],[-1,-1,[]],[[[2,[24,[15,[[15,[8]]]]]]],20],[[[15,[[15,[8]]]]],20],[24,20],[2,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[26,[25]],20,17],[[19,[23]]]],0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[25,27],[[19,[28]]]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[29,29],[[-1,-2],2,[],[]],[[],29],0,[[29,3],30],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[[29,31,32],[[19,[2]]]],[[29,33],[[19,[27]]]],[[25,29,33,-1],[[19,[17]]],34],[29,[[19,[35]]]],[[25,29,-1],[[19,[2]]],22],0,0,[[[15,[36]]],37],[[[15,[8]]],37],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[25,[26,[[15,[8]]]],[26,[13]],17],[[19,[1]]]],[[13,[15,[8]]],[[19,[1]]]],[[1,[15,[8]]],14],[13,[[19,[38]]]],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,24,-1],[[5,[2,40]]],41],0,[[[42,[-1]]],43,[24,44]],[[[45,[-1]]],[[48,[46,47]]],[24,44]],[[[45,[-1]]],49,[24,44]],[[[50,[-1]]],49,[24,44]],[[[42,[-1]]],49,[24,44]],[[[15,[8]]],[[10,[[9,[8]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]]],51,[24,44]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[-1,-2]]],[[53,[[15,[8]]]]],[[16,[[15,[8]]]]],[]],0,[[[45,[-1]]],54,[24,44]],[[[50,[-1]]],54,[24,44]],[[[42,[-1]]],54,[24,44]],[[39,24,41],[[5,[2,40]]]],[[[15,[8]]],55],[39,39],[[[45,[-1]]],[[45,[-1]]],[56,44]],[[[50,[-1]]],[[50,[-1]]],[56,44]],[[[42,[-1]]],[[42,[-1]]],[56,44]],[[[57,[-1]]],[[57,[-1]]],56],[[[52,[-1,-2]]],[[52,[-1,-2]]],56,56],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[57,[-1]],[57,[-1]]],58,24],[[[52,[-1,-2]]],59,[],[[16,[[15,[8]]]]]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[[[52,[-1,-2]]],60,[],[[16,[[15,[8]]]]]],[[[45,[-1]]],[],44],[[[50,[-1]]],[],44],[[[42,[-1]]],[],44],[-1,[[5,[[57,[-2]]]]],61,62],[-1,[[5,[[52,[-2,-3]]]]],61,62,62],[[39,24,-1],[[5,[2,63]]],41],[[39,39],17],[[[57,[-1]],[57,[-1]]],17,24],[[[52,[-1,-2]],[52,[-1,-2]]],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[39,[[26,[64]]]],[[39,3],[[5,[2,4]]]],[[39,3],[[5,[2,4]]]],[[[45,[-1]],3],[[5,[2,4]]],[65,44]],[[[50,[-1]],3],[[5,[2,4]]],[65,44]],[[[42,[-1]],3],[[5,[2,4]]],[65,44]],[[[57,[-1]],3],[[5,[2,4]]],65],[[[52,[-1,-2]],3],[[5,[2,4]]],[[16,[[15,[8]]]]],[[16,[[15,[8]]]]]],[[[52,[-1,-2]],3],[[5,[2,4]]],[[16,[[15,[8]]]]],[[16,[[15,[8]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,[[50,[-1]]],[[66,[24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[[15,[8]],[9,[8]]]]],[[52,[[15,[8]],[9,[8]]]]]],[24,[[50,[-1]]],[[66,[24]]]],[[59,-1],[[26,[[52,[[18,[8,47]],[9,[8]]]]]]],24],[13,[[5,[39]]]],[[[57,[-1]],-2],2,24,67],[[[52,[-1,-2]]],[[10,[[9,[8]]]]],[],[[16,[[15,[8]]]]]],[[[45,[-1]]],[[10,[[9,[8]]]]],[24,44]],[[[50,[-1]]],[[10,[[9,[8]]]]],[24,44]],[[[42,[-1]]],[[10,[[9,[8]]]]],[24,44]],[39,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[39,24],14],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[26,[69]]],[]],[-1,[[26,[69]]],[]],[-1,[[26,[69]]],[]],[[[52,[-1,-2]]],60,[],[[16,[[15,[8]]]]]],[[[52,[-1,-2]]],59,[],[[16,[[15,[8]]]]]],[[[50,[-1]],-2],[[50,[-3]]],[],70,[]],[[39,71],[[26,[[15,[8]]]]]],0,[[[45,[-1]]],[[26,[71]]],[24,44]],[[[45,[-1]]],71,[24,44]],[[[50,[-1]]],71,[24,44]],[[[42,[-1]]],71,[24,44]],[64,72],[-1,[[45,[-1]]],24],[-1,[[42,[-1]]],24],[[[50,[-1]]],[[50,[[48,[46,47]]]]],24],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[[[57,[-1]],[57,[-1]]],[[26,[58]]],24],[[[52,[-1,-2]],[52,[-1,-2]]],[[26,[58]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,0,0,[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[[72,[10,[[9,[8]]]]],17],0,[[[45,[-1]]],[[26,[59]]],[24,44]],[[[50,[-1]]],[[26,[59]]],[24,44]],[[[42,[-1]]],[[26,[59]]],[24,44]],0,[[[57,[-1]],-2],5,75,76],[[[52,[-1,-2]],-3],5,75,75,76],[-1,[[26,[77]]],[]],[-1,[[26,[77]]],[]],[-1,[[26,[77]]],[]],[-1,[[26,[78]]],[]],[-1,[[26,[78]]],[]],[-1,[[26,[78]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[52,[[15,[8]],[9,[8]]]]],[[52,[[18,[8,47]],[9,[8]]]]]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[26,[39]]]],[13,[[26,[39]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[39,79],[[26,[[18,[80,47]]]]]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[8]],17],[[5,[[81,[32]],82]]]],[[[15,[8]]],[[19,[35]]]],[[[15,[8]]],[[19,[83]]]],[[1,[15,[8]],84,85,31,[15,[86]],[26,[33]]],[[19,[35]]]],[[1,[15,[8]],84,85,31,[15,[86]],[26,[33]]],[[19,[83]]]],[[[15,[8]],84,85,31,[15,[86]],[26,[33]]],[[19,[35]]]],[[[15,[8]],84,85,31,[15,[86]],[26,[33]]],[[19,[83]]]],[[[15,[8]],17],[[5,[[2,[[81,[32]],[15,[8]]]],82]]]],[[[15,[8]],17],[[5,[[2,[[81,[32]],[15,[8]]]],82]]]],[[24,17,41],[[87,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[15,[8]]],[[88,[[9,[8]]]]]],[[],89],[[],90],[[71,89,89],71],[[[15,[8]],17],[[81,[13]]]],[[[88,[[9,[8]]]],22],2],[[[10,[[9,[8]]]],22],2],[71,[[9,[8]]]],[-1,[[26,[[15,[8]]]]],[]],[-1,[[26,[[2,[91,77]]]]],[]],[-1,[[26,[91]]],[]],[32,46],[32,43],[43,43],[-1,43,[]],[43,[[48,[46,47]]]],[-1,[[48,[46,47]]],[]],[-1,83,44],[32,[[15,[8]]]],[-1,49,[]],[32,49],[43,49],[83,49],[[[88,[-1]]],[[15,[8]]],[[16,[[15,[8]]]]]],[[[88,[-1]]],-1,[]],[[[10,[[9,[92]]]]],[[9,[8]]]],[[[10,[-1]]],-1,[]],[[[10,[-1]]],[[15,[8]]],[[16,[[15,[8]]]]]],[[[88,[-1]],17],[[15,[8]]],[]],[90,[[48,[93,47]]]],[32,46],[[[88,[-1]],17],[[81,[13]]],[]],[90,13],[[[10,[-1]]],14,[]],[[[10,[-1]],14],2,[]],[[[10,[-1]]],14,[]],[[[88,[[9,[8]]]],[88,[[9,[8]]]]],[[88,[[9,[8]]]]]],[[[10,[[9,[8]]]],[10,[[9,[8]]]]],[[10,[[9,[8]]]]]],[[[88,[[9,[8]]]],[88,[[9,[8]]]]],[[88,[[9,[8]]]]]],[[[10,[[9,[8]]]],[10,[[9,[8]]]]],[[10,[[9,[8]]]]]],[[89,89],89],[[90,90],90],[[89,89],2],[[90,90],2],[[89,89],89],[[90,90],90],[[89,89],2],[[90,90],2],[89,8],[89,8],[90,8],[90,8],[[[10,[[9,[8]]]],[10,[[9,[8]]]]]],[[89,89],89],[[90,90],90],[[89,89],2],[[90,90],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1]]],[[15,[8]]],[[94,[[15,[8]]]]]],[-1,-2,[],[]],[[[10,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,51],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[32,54],[43,54],[83,54],[[[9,[8]]],71],[[32,17],[[5,[2,82]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[-1,[[5,[2,82]]],[]],[[[88,[[9,[8]]]],[88,[[9,[8]]]]],[[26,[[88,[[9,[8]]]]]]]],[[[10,[[9,[8]]]],[10,[[9,[8]]]]],[[26,[[10,[[9,[8]]]]]]]],[[[88,[[9,[8]]]],[88,[[9,[8]]]]],[[26,[[88,[[9,[8]]]]]]]],[[[10,[[9,[8]]]],[10,[[9,[8]]]]],[[26,[[10,[[9,[8]]]]]]]],[71,[[9,[8]]]],[[[88,[-1]]],[[88,[-1]]],[56,44]],[[[10,[-1]]],[[10,[-1]]],56],[71,71],[89,89],[43,43],[83,83],[96,96],[86,86],[90,90],[82,82],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[88,[-1]],[88,[-1]]],58,[97,44]],[[[10,[-1]],[10,[-1]]],58,97],[[89,89],58],[[86,86],58],[[90,90],58],[89,89],[90,90],[-1,[[10,[[9,[8]]]]],[]],[[89,89],17],[[90,90],17],[-1,[[26,[59]]],[]],[[[88,[-1]]],[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[[[88,[[9,[8]]]]],[[26,[[88,[[9,[8]]]]]]]],[[[10,[[9,[8]]]]],[[26,[[10,[[9,[8]]]]]]]],[[],[[88,[-1]]],[98,44]],[[],[[10,[-1]]],98],[[],71],[-1,[[26,[8]]],[]],[32],[[[88,[-1]]],[],[]],[[[10,[-1]]],[],[]],[43],[83],[[[88,[-1]]],[],[]],[[[10,[-1]]],[],[]],[-1,[[5,[[88,[-2]]]]],61,[62,44]],[-1,[[5,[[10,[-2]]]]],61,62],[-1,[[5,[89]]],61],[-1,[[5,[43]]],61],[-1,[[5,[86]]],61],[-1,[[5,[90]]],61],[[89,89],89],[[90,90],90],[[],[[88,[[9,[8]]]]]],[-1,[[26,[[88,[[9,[8]]]]]]],[]],[[],89],[[],90],0,[[[88,[-1]],[88,[-1]]],17,[]],[[[10,[-1]],[10,[-1]]],17,[]],[[71,71],17],[[89,89],17],[[83,83],17],[[96,96],17],[[86,86],17],[[90,90],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[89,-1],2,99],[[90,-1],2,99],[-1,100,[]],[-1,100,[]],0,[71,8],[[32,3],[[5,[2,4]]]],[[101,3],[[5,[2,4]]]],[[101,3],[[5,[2,4]]]],[[[88,[-1]],3],[[5,[2,4]]],[]],[[[88,[-1]],3],[[5,[2,4]]],[]],[[[10,[-1]],3],[[5,[2,4]]],[]],[[[10,[-1]],3],[[5,[2,4]]],[]],[[71,3],[[5,[2,4]]]],[[71,3],[[5,[2,4]]]],[[89,3],[[5,[2,4]]]],[[89,3],[[5,[2,4]]]],[[89,3],[[5,[2,4]]]],[[89,3],[[5,[2,4]]]],[[89,3],[[5,[2,4]]]],[[43,3],[[5,[2,4]]]],[[83,3],[[5,[2,4]]]],[[96,3],[[5,[2,4]]]],[[96,3],[[5,[2,4]]]],[[86,3],[[5,[2,4]]]],[[86,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[90,3],[[5,[2,4]]]],[[82,3],[[5,[2,4]]]],[[82,3],[[5,[2,4]]]],[-1,-1,[]],[-1,-1,[]],[102,-1,[]],[-1,-1,[]],[[[15,[8]]],[[88,[[15,[8]]]]]],[-1,[[88,[-1]]],[]],[92,[[88,[[9,[8]]]]]],[-1,-1,[]],[103,[[10,[[9,[8]]]]]],[102,-1,[]],[-1,[[10,[-1]]],[]],[103,[[10,[[9,[8]]]]]],[71,[[10,[[9,[8]]]]]],[104,71],[-1,-1,[]],[[[10,[[9,[8]]]]],71],[-1,-1,[]],[24,43],[-1,-1,[]],[83,43],[24,83],[-1,-1,[]],[-1,-1,[]],[[[2,[[88,[[9,[8]]]],[10,[[9,[8]]]]]]],86],[-1,-1,[]],[-1,-1,[]],[96,82],[-1,-1,[]],[8,[[26,[89]]]],[8,[[26,[90]]]],[8,89],[8,89],[8,90],[8,90],[8,89],[8,90],[[[15,[8]]],32],[[105,17,-1],[[5,[43,82]]],70],[-1,89,99],[-1,90,99],[13,[[26,[89]]]],[13,[[26,[90]]]],[51,43],[-1,[[88,[-1]]],44],[-1,[[10,[-1]]],[]],[13,[[5,[[88,[[18,[8,47]]]]]]]],[13,[[5,[[88,[[9,[8]]]]]]]],[13,[[5,[[10,[[9,[8]]]]]]]],[92,[[88,[[9,[8]]]]]],[103,[[10,[[9,[8]]]]]],[[71,[10,[[9,[8]]]],73],83],[-1,59,[]],[-1,[[5,[13,106]]],[]],[-1,8,[]],[-1,[[88,[[9,[8]]]]],[]],[90,107],[-1,[[10,[[9,[8]]]]],[]],[-1,[[15,[86]]],[]],[-1,[[10,[[9,[8]]]]],[]],[-1,59,[]],[-1,[[108,[[15,[8]]]]],[]],[-1,[[10,[[9,[8]]]]],[]],[-1,[[109,[[15,[8]]]]],[]],[[],[[10,[[9,[8]]]]]],[-1,[[26,[[10,[[9,[8]]]]]]],[]],[-1,[[10,[[9,[8]]]]],[]],[[[88,[-1]],-2],2,[110,44],67],[[[10,[-1]],-2],2,110,67],[[86,-1],2,67],[-1,[[10,[[9,[8]]]]],[]],[32,[[10,[[9,[8]]]]]],[43,[[10,[[9,[8]]]]]],[83,[[10,[[9,[8]]]]]],[71,71],0,[[[88,[[9,[8]]]]],[[26,[[88,[[9,[8]]]]]]]],[[[10,[[9,[8]]]]],[[26,[[10,[[9,[8]]]]]]]],[[[10,[-1]]],-1,[]],[[89,89],2],[[90,90],2],[[89,89],89],[[90,90],90],[[89,89],17],[[90,90],17],[32,105],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[[9,[8]]],[]],[89],[90],[43,51],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[82,40],[89,17],[90,17],[-1,17,[]],[89,17],[90,17],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[89,[[111,[89]]]],[90,[[111,[90]]]],[89,[[112,[89]]]],[90,[[112,[90]]]],[[[88,[[9,[8]]]]],36],[[[10,[[9,[8]]]]],36],[[[88,[[9,[8]]]]],36],[[[10,[[9,[8]]]]],36],[-1,[[26,[69]]],[]],[-1,[[26,[69]]],[]],[-1,[[26,[69]]],[]],[-1,[[26,[69]]],[]],[-1,[[26,[[15,[86]]]]],[]],[71,8],[-1,71,[]],0,0,[32,[[26,[71]]]],[-1,[[26,[71]]],[]],[-1,71,[]],[32,71],[43,71],[83,71],[[-1,-2],86,[[16,[[15,[8]]]]],[[21,[[10,[[9,[8]]]]]]]],[[[88,[[9,[8]]]]],[[88,[[9,[8]]]]]],[[[10,[[9,[8]]]]],[[10,[[9,[8]]]]]],[89,89],[90,90],[[],59],[[[88,[[9,[8]]]],[88,[[9,[8]]]]],[[2,[[88,[[9,[8]]]],17]]]],[[[10,[[9,[8]]]],[10,[[9,[8]]]]],[[2,[[10,[[9,[8]]]],17]]]],[[[88,[[9,[8]]]],36],[[2,[[88,[[9,[8]]]],17]]]],[[[10,[[9,[8]]]],36],[[2,[[10,[[9,[8]]]],17]]]],[[[88,[[9,[8]]]],36],[[2,[[88,[[9,[8]]]],17]]]],[[[10,[[9,[8]]]],36],[[2,[[10,[[9,[8]]]],17]]]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[-1,[[15,[8]]],[]],[[[88,[[15,[8]]]]],[[5,[-1]]],113],[-1,[[5,[[88,[[9,[8]]]],114]]],[[16,[[15,[8]]]]]],[[[88,[[15,[8]]]]],[[5,[-1,115]]],113],[-1,[[5,[[10,[[18,[8,47]]]],116]]],[[16,[[15,[8]]]]]],[-1,[[5,[[10,[[9,[8]]]],116]]],[[16,[[15,[8]]]]]],[[[88,[-1]],[88,[-1]]],[[26,[58]]],[]],[[[10,[-1]],[10,[-1]]],[[26,[58]]],[]],[[89,89],[[26,[58]]]],[[86,86],[[26,[58]]]],[[90,90],[[26,[58]]]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],0,[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,54,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],0,0,[-1,[[10,[[9,[8]]]]],[]],[-1,[[26,[[10,[[9,[8]]]]]]],[]],[-1,[[26,[59]]],[]],[32,[[26,[59]]]],[43,[[26,[59]]]],[83,[[26,[59]]]],0,[[89,89],2],[[90,90],2],[82,[[26,[64]]]],[[32,71],[[45,[32]]]],[-1,[[26,[[108,[[15,[8]]]]]]],[]],[[[9,[8]]],[[108,[[9,[8]]]]]],[[[15,[[15,[8]]]]],[[108,[[18,[8,47]]]]]],[-1,117,[]],[[32,-1],5,76],[[[88,[-1]],-2],5,[75,44],76],[[[10,[-1]],-2],5,75,76],[[89,-1],5,76],[[43,-1],5,76],[[86,-1],5,76],[[90,-1],5,76],[[89,89,17],2],[[90,90,17],2],[[[88,[[9,[8]]]]],2],[[[10,[[9,[8]]]]],2],[-1,[[26,[[10,[[9,[8]]]]]]],[]],[-1,[[26,[77]]],[]],[-1,[[26,[77]]],[]],[-1,[[26,[77]]],[]],[-1,[[26,[77]]],[]],[-1,118,[]],[82,[[26,[119]]]],[[[15,[[15,[8]]]]],[[109,[[18,[8,47]]]]]],[-1,[[26,[[109,[[15,[8]]]]]]],[]],0,[[89,89],89],[[90,90],90],[[89,89],2],[[90,90],2],[[89,89],89],[[90,90],90],0,[-1,[[26,[78]]],[]],[-1,[[26,[78]]],[]],[-1,[[26,[78]]],[]],[-1,[[26,[78]]],[]],[[90,32],17],[43,51],[71,[[18,[80,47]]]],[[[88,[-1]]],14,[]],[[[10,[-1]]],14,[]],[-1,14,[]],[[101,-1,17,[26,[22]]],[[5,[2,4]]],120],[32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[101,-1,17,64],[[5,[2,4]]],120],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[[88,[[9,[8]]]]],92],[[[10,[[9,[8]]]]],103],[[89,89],2],[[90,90],2],[[[88,[[9,[8]]]]],36],[[[10,[[9,[8]]]]],36],[[[88,[[9,[8]]]]],36],[[[10,[[9,[8]]]]],36],[[[15,[8]]],[[5,[[88,[[9,[8]]]],121]]]],[[[15,[8]]],[[5,[[88,[[9,[8]]]],121]]]],[[[15,[8]]],[[5,[[10,[[9,[8]]]],116]]]],[[[15,[8]]],[[5,[[10,[[9,[8]]]],121]]]],[[[15,[8]]],[[5,[[88,[[9,[8]]]],121]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[79,[[5,[[88,[[9,[8]]]]]]]],[[[15,[8]]],[[5,[[88,[[9,[8]]]]]]]],[[[15,[8]]],[[5,[[10,[[9,[8]]]]]]]],[79,[[5,[[10,[[9,[8]]]]]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[-1,[10,[[9,[8]]]]],[[5,[86,121]]],[[16,[[15,[8]]]]]],[-1,[[5,[-2]]],[],[]],[79,[[5,[86]]]],[[[2,[13,[10,[[9,[8]]]]]]],[[5,[86]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[88,[[9,[8]]]]],[[81,[13]]]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[[88,[[9,[8]]]]],60],[[[88,[[9,[8]]]]],122],[[[88,[[9,[8]]]]],59],[[[88,[[9,[8]]]]],123],[8,90],[[89,89],89],[[90,90],90],[[[88,[[9,[8]]]]],[[5,[13,106]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[71,89],71],[[[88,[-1]],22],2,[]],[[[10,[-1]],22],2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[124,[[18,[80,47]]]],[60,[[9,[118]]]],[122,[[9,[36]]]],[59,[[9,[37]]]],[123,[[9,[92]]]],[125,[[9,[118]]]],[126,[[9,[36]]]],[127,[[9,[37]]]],[128,[[9,[92]]]],[60,[[15,[8]]]],[122,[[15,[8]]]],[59,[[15,[8]]]],[123,[[15,[8]]]],[125,[[15,[8]]]],[126,[[15,[8]]]],[127,[[15,[8]]]],[128,[[15,[8]]]],[[[15,[8]],3],[[5,[2,4]]]],[[[15,[8]]],14],[[60,60]],[[122,122]],[[59,59]],[[123,123]],[[125,125]],[[126,126]],[[127,127]],[[128,128]],[[60,60]],[[122,122]],[[59,59]],[[123,123]],[[125,125]],[[126,126]],[[127,127]],[[128,128]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[[[15,[80]]],[[5,[2,95]]]],[60,60],[122,122],[59,59],[123,123],[125,125],[126,126],[127,127],[128,128],[129,129],[124,124],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[60,60],58],[[122,122],58],[[59,59],58],[[123,123],58],[[125,125],58],[[126,126],58],[[127,127],58],[[128,128],58],[[],60],[[],122],[[],59],[[],123],[[],125],[[],126],[[],127],[[],128],[60],[122],[59],[123],[125],[126],[127],[128],[-1,[[5,[60]]],61],[-1,[[5,[122]]],61],[-1,[[5,[59]]],61],[-1,[[5,[123]]],61],[-1,[[5,[125]]],61],[-1,[[5,[126]]],61],[-1,[[5,[127]]],61],[-1,[[5,[128]]],61],[[60,60],17],[[122,122],17],[[59,59],17],[[123,123],17],[[125,125],17],[[126,126],17],[[127,127],17],[[128,128],17],[[124,124],17],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[60,3],[[5,[2,4]]]],[[60,3],[[5,[2,4]]]],[[60,3],[[5,[2,4]]]],[[122,3],[[5,[2,4]]]],[[122,3],[[5,[2,4]]]],[[122,3],[[5,[2,4]]]],[[59,3],[[5,[2,4]]]],[[59,3],[[5,[2,4]]]],[[59,3],[[5,[2,4]]]],[[123,3],[[5,[2,4]]]],[[123,3],[[5,[2,4]]]],[[123,3],[[5,[2,4]]]],[[125,3],[[5,[2,4]]]],[[125,3],[[5,[2,4]]]],[[125,3],[[5,[2,4]]]],[[126,3],[[5,[2,4]]]],[[126,3],[[5,[2,4]]]],[[126,3],[[5,[2,4]]]],[[127,3],[[5,[2,4]]]],[[127,3],[[5,[2,4]]]],[[127,3],[[5,[2,4]]]],[[128,3],[[5,[2,4]]]],[[128,3],[[5,[2,4]]]],[[128,3],[[5,[2,4]]]],[[129,3],[[5,[2,4]]]],[[129,3],[[5,[2,4]]]],[[124,3],[[5,[2,4]]]],[125,60],[[[9,[8]]],60],[-1,-1,[]],[118,60],[36,122],[126,122],[[[9,[8]]],122],[-1,-1,[]],[-1,-1,[]],[127,59],[37,59],[[[9,[8]]],59],[-1,-1,[]],[[[9,[8]]],123],[92,123],[128,123],[118,125],[[[9,[8]]],125],[-1,-1,[]],[60,125],[36,126],[122,126],[[[9,[8]]],126],[-1,-1,[]],[-1,-1,[]],[59,127],[[[9,[8]]],127],[37,127],[-1,-1,[]],[123,128],[[[9,[8]]],128],[92,128],[-1,-1,[]],[89,124],[-1,-1,[]],[13,[[5,[60]]]],[13,[[5,[122]]]],[13,[[5,[59]]]],[13,[[5,[123]]]],[13,[[5,[125]]]],[13,[[5,[126]]]],[13,[[5,[127]]]],[13,[[5,[128]]]],[60,118],[122,36],[59,37],[123,92],[125,118],[126,36],[127,37],[128,92],[[60,-1],2,67],[[122,-1],2,67],[[59,-1],2,67],[[123,-1],2,67],[[125,-1],2,67],[[126,-1],2,67],[[127,-1],2,67],[[128,-1],2,67],[60,60],[122,122],[59,59],[123,123],[125,125],[126,126],[127,127],[128,128],[-1,-2,[],[]],[60,[[9,[8]]]],[60,118],[-1,-2,[],[]],[122,36],[122,[[9,[8]]]],[59,[[9,[8]]]],[-1,-2,[],[]],[59,37],[123,[[9,[8]]]],[-1,-2,[],[]],[123,92],[-1,-2,[],[]],[125,[[9,[8]]]],[125,118],[-1,-2,[],[]],[126,36],[126,[[9,[8]]]],[127,[[9,[8]]]],[-1,-2,[],[]],[127,37],[128,[[9,[8]]]],[128,92],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[125,[[18,[80,47]]]],[126,[[18,[80,47]]]],[127,[[18,[80,47]]]],[128,[[18,[80,47]]]],[118,60],[36,122],[37,59],[92,123],[118,125],[36,126],[37,127],[92,128],[8,124],[60],[122],[59],[123],[125],[126],[127],[128],[[60,60],[[26,[58]]]],[[122,122],[[26,[58]]]],[[59,59],[[26,[58]]]],[[123,123],[[26,[58]]]],[[125,125],[[26,[58]]]],[[126,126],[[26,[58]]]],[[127,127],[[26,[58]]]],[[128,128],[[26,[58]]]],[[60,60],60],[[122,122],122],[[59,59],59],[[123,123],123],[[125,125],125],[[126,126],126],[[127,127],127],[[128,128],128],[[60,60],60],[[122,122],122],[[59,59],59],[[123,123],123],[[125,125],125],[[126,126],126],[[127,127],127],[[128,128],128],[[60,-1],5,76],[[122,-1],5,76],[[59,-1],5,76],[[123,-1],5,76],[[125,-1],5,76],[[126,-1],5,76],[[127,-1],5,76],[[128,-1],5,76],[[60,118],2],[[122,36],2],[[59,37],2],[[123,92],2],[[125,118],2],[[126,36],2],[[127,37],2],[[128,92],2],[60,[[18,[80,47]]]],[122,[[18,[80,47]]]],[59,[[18,[80,47]]]],[123,[[18,[80,47]]]],[125,[[18,[80,47]]]],[126,[[18,[80,47]]]],[127,[[18,[80,47]]]],[128,[[18,[80,47]]]],[124,[[18,[80,47]]]],[60,[[9,[8]]]],[122,[[9,[8]]]],[59,[[9,[8]]]],[123,[[9,[8]]]],[125,[[9,[8]]]],[126,[[9,[8]]]],[127,[[9,[8]]]],[128,[[9,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[[[15,[8]]],[[5,[125,121]]]],[[[15,[8]]],[[5,[126,121]]]],[[[15,[8]]],[[5,[127,121]]]],[[[15,[8]]],[[5,[128,121]]]],[79,[[5,[60]]]],[[[15,[8]]],[[5,[60]]]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[5,[122]]]],[-1,[[5,[-2]]],[],[]],[79,[[5,[122]]]],[-1,[[5,[-2]]],[],[]],[79,[[5,[59]]]],[[[15,[8]]],[[5,[59]]]],[[[15,[8]]],[[5,[123]]]],[79,[[5,[123]]]],[-1,[[5,[-2]]],[],[]],[79,[[5,[125]]]],[[[15,[8]]],[[5,[125]]]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[5,[126]]]],[79,[[5,[126]]]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[5,[127]]]],[79,[[5,[127]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[5,[128]]]],[79,[[5,[128]]]],[-1,[[5,[-2]]],[],[]],[79,[[5,[124]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[130,[[18,[8,47]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[131,131],[130,130],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[131,131],17],[[-1,-2],17,[],[]],[[27,3],30],[[131,3],[[5,[2,4]]]],[[131,3],[[5,[2,4]]]],[[130,3],[[5,[2,4]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,[[5,[131]]]],[13,[[5,[130]]]],[131,132],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[],[[0,[93]]]],[28,27],[27,27],[27,2],[27,[[19,[[48,[22]]]]]],[[27,[15,[13]],-1],[[19,[27]]],[[21,[20]]]],[[27,17],14],[[27,13,13,[15,[8]]],[[19,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[[15,[8]]],[[26,[131]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[25,25],[[-1,-2],2,[],[]],0,[[133,3],30],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[25,27],[[19,[[26,[35]]]]]],[[25,27,22],[[19,[134]]]],[[25,28,22],[[135,[[26,[-1]]]]],[]],[[25,27,22],[[19,[[26,[-1]]]]],[]],[25,133],[[25,22],2],[[[26,[136]],17],[[87,[25]]]],[25,33],[[25,[26,[137]],33],[[19,[138]]]],[[25,24],[[87,[17]]]],[[25,[15,[24]]],[[87,[64]]]],[[25,[15,[24]]],[[87,[[2,[33,33]]]]]],[[25,[15,[8]],17],2],[[25,27,-1],[[19,[134]]],34],[[25,27,-1,139],[[19,[134]]],34],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[13,139],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[140,[[0,[22]]]]],22],[[[140,[-1,-2]]],[[140,[-1,-2]]],56,56],[[-1,-2],2,[],[]],[-1,-1,[]],[-1,-1,[]],[[-1,24,25],[[141,[2]]],[]],[[[140,[-1,-2]],24,25],[[141,[2]]],22,22],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[[27,25,142,36,36],2],[[-1,27,25,142,36,36],2,[]],[[[140,[-1,-2]],27,25,142,36,36],2,22,22],0,[-1,-2,[],[]],[-1,[[140,[[0,[22]]]]],22],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[23,13,17],[[19,[[18,[8]]]]]],[[23,25,[26,[[15,[8]]]],[26,[13]],17],[[19,[1]]]],[[23,27,[15,[13]]],[[19,[27]]]],[[23,[15,[8]],13,17],[[19,[14]]]]],"c":[],"p":[[3,"SigningKey",0],[15,"tuple"],[3,"Formatter",1651],[3,"Error",1651],[4,"Result",1652],[8,"RngCore",1653],[8,"CryptoRng",1653],[15,"u8"],[15,"array"],[3,"B64",398],[3,"Error",1654],[3,"TypeId",1655],[15,"str"],[3,"String",1656],[15,"slice"],[8,"AsRef",1657],[15,"bool"],[3,"Vec",1658],[6,"LkResult",0],[3,"UserData",64],[8,"Into",1657],[8,"FnMut",1659],[3,"LkCtx",64],[8,"NetPkt",398],[3,"Linkspace",1568],[4,"Option",1660],[3,"Query",1477],[6,"LkHash",398],[3,"LkStatus",128],[6,"Result",1651],[6,"RootedSpace",398],[3,"NetPktPtr",398],[6,"Stamp",398],[8,"PktHandler",1610],[6,"NetPktBox",398],[15,"u32"],[15,"u64"],[6,"PubKey",398],[4,"FieldEnum",161],[3,"Error",1661],[8,"Write",1662],[3,"ShareArcPkt",161],[3,"NetPktArc",398],[8,"Sized",1663],[3,"ReroutePkt",161],[3,"NetPktFatPtr",1664],[3,"Global",1665],[3,"Box",1666],[8,"Point",398],[3,"RecvPkt",161],[3,"NetPktArcPtr",1667],[3,"TreeEntry",161],[3,"TreeKey",1668],[3,"ByteSegments",1669],[15,"f64"],[8,"Clone",1670],[3,"PktCmp",161],[4,"Ordering",1671],[3,"U64",1024],[3,"U16",1024],[8,"Deserializer",1672],[8,"Deserialize",1672],[3,"Error",1673],[15,"usize"],[8,"Debug",1651],[8,"From",1657],[8,"Hasher",1674],[3,"FieldInfo",1675],[3,"LinkPointHeader",1676],[8,"FnOnce",1659],[3,"NetPktHeader",398],[3,"QuickDedup",161],[3,"PointParts",1677],[3,"PointHeader",1676],[8,"Serialize",1678],[8,"Serializer",1678],[3,"Signed",1677],[3,"Tail",1677],[3,"ABList",1679],[4,"ABE",1680],[4,"Cow",1681],[4,"PktError",398],[3,"NetPktParts",398],[6,"Domain",398],[6,"GroupID",398],[3,"Link",398],[6,"Result",1661],[3,"AB",398],[3,"NetFlags",398],[3,"PointTypeFlags",398],[3,"LinkPoint",1677],[15,"u128"],[8,"Iterator",1682],[8,"Borrow",1683],[3,"MatchError",1680],[4,"SpaceError",398],[8,"Ord",1671],[8,"Default",1684],[8,"IntoIterator",1685],[4,"PointFields",1677],[3,"PktFmt",398],[15,"never"],[3,"Uint",1686],[4,"NetOpts",1687],[3,"PartialNetHeader",1688],[3,"Utf8Error",1689],[4,"RuleType",1690],[3,"RootedSpaceBytes",1691],[3,"SpaceBytes",1692],[8,"Hash",1674],[3,"Iter",1693],[3,"IterNames",1693],[8,"FromStr",1694],[4,"ABTxtError",1695],[3,"ParseErr",1696],[4,"DecodeError",1697],[3,"SelectLink",1698],[15,"u16"],[8,"Error",1699],[8,"Write",1651],[3,"FitSliceErr",1700],[3,"U32",1024],[3,"U128",1024],[3,"U8",1024],[3,"LU16",1024],[3,"LU32",1024],[3,"LU64",1024],[3,"LU128",1024],[4,"TryFitSliceError",1024],[4,"KnownOptions",1477],[4,"PredicateType",1477],[3,"PredInfo",1701],[3,"LkInfo",1568],[15,"i32"],[6,"Result",1673],[3,"Path",1702],[6,"QueryIDRef",1703],[15,"isize"],[3,"Span",1704],[3,"Cb",1610],[4,"ControlFlow",1705],[4,"StopReason",1610],[8,"PointExt",398],[8,"NetPktExt",398],[6,"RecvPktPtr",398],[8,"SigningExt",398],[13,"MissingBytes",1023],[8,"BigEndianUInt",1024],[13,"Overflow",1475]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
