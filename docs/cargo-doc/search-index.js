var searchIndex = JSON.parse('{\
"linkspace":{"doc":"Linkspace ","t":"HCGGRRICCDALLLLAALLLLKLLACCCCCCCCCCCCCCCCCCCAAALLAAKLCLLLLALHAFFFFHDDMLLLLLLFFLFLLLLLLLLLLLFMLLLLLLLLLHRRRRRRRRRRRRRRRRRRHHHHCFCCADRLLLLLMLLMMLLFFFFMMFFLLLLLFFFFFNDNNHNNNENNNSNNNNNNNNNNNNNNDNDDNNEDNNNNNNNLMLLLLLFLLLLLLLLLLLLLLLLMLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLFLLLLLLLLMMMLLLLLLALLLMLLLLLMLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLFFFFFFFFFFDSDNNNNSSSSNGSSSSNGNNGGGNNNNSNSSSSDGNNNNDIDGIDDDNEEDIIDNGGNSSGNGNIDGGNNNNFLLLLFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLFLLLALLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLKLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLKLLLLLLMMLLKLLLLLLLLFLLLLLLKLLLLLLLLLLLLLKLLLLLKLLLLKLLLMLLMKLKLLLLLLLLLLLLFFLKLLLLLFMLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMIDDDDSSSSSSSSQNEDDDDDSSSSSSSSLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMSNNNNNNNNNNNENNNNNNENNHNDNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFLLLLLLLLLLLLLLLLLLLDDLLLLLLMLLLLLLLFFFFFFFFFFFFFFLLLLLLLFLLFFFF","n":["BUILD_INFO","Linkspace","LkError","LkResult","PRIVATE","PUBLIC","PktHandler","Q","Query","SigningKey","abe","borrow","borrow_mut","clone","clone_into","consts","conventions","fmt","from","generate","generate_with","handle_pkt","into","into_result","key","lk_datapoint","lk_encode","lk_eval","lk_get","lk_key","lk_keypoint","lk_linkpoint","lk_open","lk_process","lk_process_while","lk_pull","lk_query","lk_query_parse","lk_query_print","lk_query_push","lk_save","lk_split_abe","lk_stop","lk_watch","misc","point","prelude","pubkey","pubkey_bytes","query","runtime","stopped","to_owned","try_cb","try_from","try_from","try_into","type_id","varctx","vzip","DEFAULT_PKT","ctx","lk_encode","lk_eval","lk_split_abe","lk_try_encode","LK_EVAL_CTX_RT","LkCtx","UserData","argv","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","core_ctx","ctx","default","empty_ctx","from","from","from","from","from","from","from","into","into","into_result","into_result","lk_ctx","pkt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","EXCHANGE_DOMAIN","MAX_CONTENT_SIZE","MAX_DATA_SIZE","MAX_IPATH_SIZE","MAX_KEYPOINT_DATA_SIZE","MAX_LINKPOINT_DATA_SIZE","MAX_LINKS_LEN","MAX_NETPKT_SIZE","MAX_NETPKT_U16SIZE","MAX_PATH_LEN","MAX_POINT_SIZE","MAX_SPATH_COMPONENT_SIZE","MAX_SPATH_SIZE","MIN_LINKPOINT_SIZE","MIN_NETPKT_SIZE","MIN_POINT_SIZE","PRIVATE","PUBLIC","PUBLIC_GROUP_B64","PUBLIC_GROUP_PKT","SINGLE_LINK_PKT","TEST_GROUP","TEST_GROUP_PKT","LkStatus","lk_pull","lk_status_poll","lk_status_set","status","LkStatus","STATUS_PATH","borrow","borrow_mut","clone","clone_into","default","domain","fmt","from","group","instance","into","into_result","lk_status_overwatch","lk_status_poll","lk_status_request","lk_status_set","objtype","qid","testu32","testu8","to_owned","try_from","try_into","type_id","vzip","lk_key","lk_key_decrypt","lk_key_encrypt","lk_key_pubkey","lk_keygen","Break","Cb","Closed","CreateF","DEFAULT_ROUTING_BITS","DataF","DataSizeF","DomainF","FieldEnum","Finish","GroupIDF","IPathF","LIST","LinksLenF","PathComp0F","PathComp1F","PathComp2F","PathComp3F","PathComp4F","PathComp5F","PathComp6F","PathComp7F","PathF","PathLenF","PktHashF","PktTypeF","PubKeyF","RecvPkt","Replaced","ReroutePkt","ShareArcPkt","SignatureF","SizeF","StopReason","TreeEntry","VarHopF","VarNetFlagsF","VarStampF","VarUBits0F","VarUBits1F","VarUBits2F","VarUBits3F","abe","arc","as_netarc","as_netbox","as_point","as_point","as_point","blake3_hash","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_arc","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_key","btree_key","byte_segments","byte_segments","byte_segments","bytes","bytes2uniform","cb","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create","data","data","data","data_size","deref","deref","deref","deserialize","display","eq","eq","equivalent","fixed_size","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_db","from_dyn","from_pkt","from_str","handle_pkt","handle_pkt","hash","hash_ref","hash_ref","hash_ref","info","into","into","into","into","into","into","into","into_abe","into_result","into_result","into_result","into_result","into_result","into_result","into_result","linkpoint_header","linkpoint_header","linkpoint_header","links_len","local_log_ptr","map","mut_route","net_header","net_header_mut","net_header_ref","net_header_ref","net_header_ref","new","new","nop_stopped","owned","padding","padding","padding","partial_cmp","parts","parts","parts","pkt","pkt","pkt","pkt_segments","pkt_segments","pkt_segments","point_header_ref","point_header_ref","point_header_ref","read","recv","recv","recv","recv","serialize","signed","signed","signed","stopped","stopped","tail","tail","tail","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_cb","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_id","try_from_name","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_to_abe","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","vzip","vzip","vzip","vzip","vzip","vzip","vzip","read_pkt","lk_datapoint","lk_datapoint_ref","lk_keypoint","lk_keypoint_ref","lk_linkpoint","lk_linkpoint_ref","lk_read","lk_read_unchecked","lk_write","AB","ALWAYS_ZERO","B64","BadOffset","CapacityError","ComponentSize","ContentLen","DATA","DATA_POINT","DEFAULT","DONT_FORWARD","DataOffsetIncompatible","Domain","EMPTY","EMPTY","ERROR","ERROR_POINT","EmptyComponentIdx","GroupID","HashMismatch","HeaderReservedSet","IPath","IPathBuf","IPathC","ISPOffsetIncompatible","IndivisableLinkbytes","InvalidPktDataLength","InvalidSignature","KEY_POINT","KeyPointLength","LINK","LINKED_IN_FUTURE_PKT","LINKED_IN_PREVIOUS_PKT","LINK_POINT","Link","LkHash","MaxLen","MissingBytes","MissingHeader","MissingIdx","NetFlags","NetPkt","NetPktArc","NetPktBox","NetPktExt","NetPktHeader","NetPktParts","NetPktPtr","PaddingBitsNotU8Max","PathError","PktError","PktFmt","Point","PointExt","PointTypeFlags","PrivateGroup","PubKey","RecvPktPtr","ReservedBitsSet","SIGNATURE","SILENT","SPath","SPath","SPathBuf","SignedInvalidPkt","SigningExt","SigningKey","Stamp","Tag","TailLength","TailLength","UnknownPktType","ZeroComponent","ab","aligned_net_pkt_size","all","all","and_flags","as_abtxt_c","as_be_bytes","as_be_bytes","as_bytes","as_datapoint","as_keypoint","as_linkpoint","as_mut_sized","as_netarc","as_netarc","as_netarc","as_netbox","as_netbox","as_netparts","as_netpkt_bytes","as_point","as_point","as_point","as_point","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref_cut","as_rules","as_sized","as_str","as_str","b64","b64_into","b64_mini","bit_and","bit_and","bit_or","bit_or","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_segments","byte_segments","byte_segments","byte_segments","cfrom","check","check","check","check","check_private","checked_add","checked_add","checked_sub","checked_sub","cinto","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","complement","complement","compute_hash","contains","contains","create_stamp","cut_prefix_nulls","data","data","data","data","decr","decr","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deserialize","deserialize","difference","difference","domain","domain","empty","empty","endian_types","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","fields","fields","flags","flags_u8","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_truncate","from_bits_truncate","from_bits_unchecked","from_bits_unchecked","from_bytes_unchecked","from_fd","from_fd","from_filelike","from_filelike","from_header_and_copy","from_into_filelike","from_into_filelike","from_into_socketlike","from_into_socketlike","from_iter","from_iter","from_raw_arc","from_ref","from_ref","from_socketlike","from_socketlike","from_str","from_str","from_str","from_u128","from_u256","from_unchecked","get_create_stamp","get_data_str","get_domain","get_field","get_group","get_ipath","get_links","get_path","get_path_len","get_pubkey","get_recv","get_signature","group","group","hash","hash","hash","hash","hash","hash","hash_ref","hash_ref","hash_ref","hash_ref","hop","hop","inc","inc","inner","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_raw_arc","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","io","ipath","ipath1","ipath_buf","is_all","is_all","is_datapoint","is_empty","is_empty","is_keypoint","is_linkpoint","is_valid_bit_pattern","is_valid_bit_pattern","leading_ones","leading_ones","leading_zeros","leading_zeros","linkpoint_header","linkpoint_header","linkpoint_header","linkpoint_header","links","mut_flags_u8","net_header","net_header","net_header","net_header_mut","net_header_mut","net_header_ref","net_header_ref","net_header_ref","net_header_ref","new","not","not","not","not","now","overflowing_add","overflowing_add","overflowing_shl","overflowing_shl","overflowing_shr","overflowing_shr","padding","padding","padding","padding","parse","parse_abtxt","parse_ctx","parse_str","parse_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","parts","parts","parts","parts","path","path_len","pkt_segments","pkt_segments","pkt_segments","pkt_segments","point_header","point_header_ref","point_header_ref","point_header_ref","point_header_ref","prefix","provide","provide","ptr","pubkey","pubkey","recv","recv","recv","recv","remove","remove","requires_more","reroute","select","serialize","serialize","set","set","set_domain","set_group","signature","signed","signed","signed","signed","size","source","spath_buf","stamp","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","tag","tail","tail","tail","tail","test","thin_arc","to_abe","to_abe_str","to_abe_str","to_default_str","to_html","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u128","to_u256","toggle","toggle","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","try_ab","try_fit_byte_slice","try_fit_bytes_or_b64","try_fit_slice","try_fit_slice_filled","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_utf8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ubits","uint","uint","uint","uint","unchecked_from","union","union","utf8","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_flags","write_abe","write_abe","netpkt_size","BigEndianUInt","LU128","LU16","LU32","LU64","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","Native","Overflow","TryFitSliceError","U128","U16","U32","U64","U8","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","abe_bits","align","align","align","align","align","align","align","align","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","binary_fmt_slice","binary_str","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","check","check","check","check","check","check","check","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","incr","incr","incr","incr","incr","incr","incr","incr","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","into_result","lu_abe","lu_abe","lu_abe","lu_abe","new","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set","set","set","set","set","set","set","set","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_abe","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_fit_slice","try_fit_slice","try_fit_slice","try_fit_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","got","max","ALL","Create","DataSize","Domain","Follow","Group","Hash","Hop","I","IBranch","IDb","INew","KnownOptions","LinksLen","Mode","Netflags","NotifyClose","Path","PathLen","PredicateType","Prefix","Pubkey","Q","Qid","Query","Recv","Size","Stamp","Type","Ubits0","Ubits1","Ubits2","Ubits3","as_bytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","info","into","into","into","into_result","into_result","into_result","iter_all","lk_hash_query","lk_query","lk_query_clear","lk_query_compile","lk_query_parse","lk_query_print","lk_query_push","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from_id","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Linkspace","LkInfo","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dir","fmt","from","from","into","into","into_result","into_result","lk_get","lk_get_all","lk_get_hash","lk_get_ref","lk_info","lk_list_watches","lk_open","lk_process","lk_process_while","lk_save","lk_save_all","lk_stop","lk_watch","lk_watch2","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vspan","vzip","vzip","lk_eval","lk_key","lk_query_parse","lk_try_encode"],"q":[[0,"linkspace"],[60,"linkspace::abe"],[66,"linkspace::abe::ctx"],[102,"linkspace::consts"],[125,"linkspace::conventions"],[130,"linkspace::conventions::status"],[157,"linkspace::key"],[162,"linkspace::misc"],[388,"linkspace::misc::read"],[389,"linkspace::point"],[398,"linkspace::prelude"],[1014,"linkspace::prelude::PktError"],[1015,"linkspace::prelude::endian_types"],[1467,"linkspace::prelude::endian_types::TryFitSliceError"],[1469,"linkspace::query"],[1560,"linkspace::runtime"],[1600,"linkspace::varctx"]],"d":["","","","","","","Callbacks stored in a Linkspace instance. use misc::cb to …","","","","ascii byte expression utilities","","","","","","A set of functions that adhere to conventions","","Returns the argument unchanged.","","","Handles an event.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Called when break, finished, or replaced","","","","","","","Functions with a custom eval context","","default fmt in many cases and output for <code>[pkt]</code>","Custom context for use in varctx","encode bytes as an abe that evaluate back to bytes.","Evaluate an expression and return the bytes","Exec callback for each expr between control characters (‘…","lk_encode with Err on:","","Create a new context for use in crate::varctx with …","User config for setting additional context to evaluation.","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","pull requests are saved here.","","","","","","","","","","","","","","","","","","","","","","","","pull requests create a linkpoint in [f:exchange]:[#:0…","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","A query that returns both requests and updates","","A query that returns both requests and updates","Insert a callback that is triggered on a request. Must …","","","","","","","","","","linkspace stored identity","","","read the public key from a lk_key_encrypt string","","","","","","A thread local default net header value when creating new …","","","","An enum that provides access to the fields in a NetPkt","","","","","","","","","","","","","","","","","","","Wrapper around a NetPkt that sets its recv field","","Wrapper around a netpkt with a mutable NetHeader","Wrapper around a NetPkt that ensures .as_netarc() is only …","","","","A wrapper around TreeKey ( see [TreeKey::from_fields] ) …","","","","","","","","","","","","","","","Blake3 hash","","","","","","","","","","","","","","","","","","","","","This always returns something even if the field doesn’t …","Read bytes as a [0,1) float by reading the first 52 bits. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create a datapoint with upto MAX_CONTENT_SIZE bytes and …","","create a keypoint and wrap it as a NetPktBox. i.e. a …","","create a new linkpoint NetPktBox","","","","","newtype around bytes to print/parse [abe] text","","newtype around bytes to print/parse b64 (url-safe …","","","","","","","","Request that this packet is not forwarded","","Alias for <code>AB&lt;[u8;16]&gt;</code>","","Indicate that the chances of anybody interested in this …","","","","Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","","","","","","","","","","","","A Tag and LkHash ","Blake3 hash of the packet content. Alias for <code>B64&lt;[u8;32]\\\\&gt;</code>","","","","","Variable flags used in transit","A trait to access fields of a net pkt. Auto impls NetPktExt…","Arc around the byte repr NetPkt","Heap allocated repr of a NetPkt.","Utilities for NetPkt","Variable fields in a crate::NetPkt used in point exchange","Rust enum repr of a NetPkt","Byte repr of a NetPkt","","","","A static packet formatter similar to DEFAULT_PKT without …","General trait for accessing point field.","Directly access a Point’s domain, group, links, …","Pkt flag indicating its type.","","Taproot Schnorr publickey. Alias for <code>B64&lt;[u8;32]&gt;</code>","","","","Indicate that the chances of anybody interested in this …","Explicitly SPath bytes (analogous to [str])","","Owned SPath bytes (analogous to String)","","","","A Big endian u64 of microseconds since EPOCH","Alias for <code>AB&lt;[u8;16]&gt;</code>","","","","","copy <code>val</code> into array of N bytes prepending 0’s as needed. …","","Returns the set containing all flags.","Returns the set containing all flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","","","","","DEFAULT_ROUTING_BITS","","","","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","[Thread Local]: get the ‘default’ domain. from …","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","Safety","","","","","Safety","","","","","","","Safety","","","","","","","","","","The caller must ensure PktHash matches the Pkt","","","","","","","","","","","see NetPkt::recv","","[Thread Local]: get the ‘default’ group. from set_group…","","","","","","","","","","","","","","","","","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","","","","","","","Return a LinkPointHeader, works for both key and link …","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","current time as big endian u64 microseconds since epoch","","","","","","","Points are padded with upto 7 \\\\xFF bytes and are u64 …","","","","","","","","","","","","","","The rusty enum repr of a point.","","","","","","A utility function to translate this format into bytes for …","","","","","","","","","","","","Usually a LkHash, sometimes a PubKey or GroupID","","","recv is somewhat special. It depends on the context. …","","","","Removes the specified flags in-place.","Removes the specified flags in-place.","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","set the result for domain","","","","","","","Padded size ","","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","","","","","","","create a html fragment describing the packet","","","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Self::utf8 but fallback to abtxt","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code“create”","“data_size”","“domain”","try and also return the linked packets.","“group”","“hash”","“hop”","“i”","“i_branch”","“i_db”","“i_new”","","“links_len”","which index to walk when reading from the database","“netflags”","(not supported by lk_watch) - append the request on finish …","“path”","“path_len”","A list of all supported query predicates","“prefix”","“pubkey”","","The arg is the query id under which to operate. Can be …","A set of predicates and options used to select packets","“recv”","“size”","“stamp”","“type”","“ubits0”","“ubits1”","“ubits2”","“ubits3”","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new Query specifically for a hash. Sets the right …","Create a new Query. Copy from a template. Q is the empty …","Clear a Query for reuse","Compile a Query into a function which tests packets to …","Add multiple ABE encoded statements to a Query","Get the string representation of a Query","Add a single statement to a Query, potentially skipping an …","","","","","","","","","","","","","","","","","","","","The linkspace runtime.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","get the first result from the database matching the query.","Run callback for every match for the query in the database.","","read a single packet directly without copying.  This means …","","","open a linkspace runtime.","process the log of new packets and trigger callbacks. …","continuously process callbacks until:","save a packet. Returns true if new and false if its old.","","close lk_watch watches based on the query id ‘…","Registers the query under its ‘qid’ ( .e.g. set by …","lk_watch with a custom log tracing::Span The span will be …","","","","","","","","See lk_watch2","","","","","custom ctx version of super::lk_query_parse",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,34,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,34,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,22,28,22,28,22,22,22,0,0,22,0,28,22,22,22,22,22,22,28,22,28,22,0,22,22,28,22,28,22,28,22,28,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,31,31,0,0,31,31,31,31,31,0,0,0,0,0,14,0,14,38,0,38,38,38,0,14,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,14,0,0,38,38,0,0,38,38,38,38,38,38,38,38,42,42,44,44,49,42,0,55,14,51,38,44,49,42,42,55,14,51,38,44,49,42,51,51,44,49,42,38,0,0,55,51,38,44,49,42,55,51,38,44,49,42,51,44,49,42,51,44,49,42,51,38,51,38,38,38,51,38,38,44,49,42,55,14,51,38,44,49,49,42,51,49,51,38,55,55,51,44,49,42,38,55,14,51,38,44,49,42,38,55,14,51,38,44,49,42,44,49,42,51,51,49,38,44,44,44,49,42,44,42,0,49,44,49,42,51,44,49,42,44,49,42,44,49,42,44,49,42,0,44,49,42,49,51,44,49,42,55,55,44,49,42,55,51,51,38,44,49,42,38,0,55,14,51,38,44,49,42,38,38,55,14,51,38,44,49,42,38,55,14,51,38,44,49,42,51,55,14,51,38,44,49,42,0,0,0,0,0,0,0,0,0,0,0,91,0,98,98,98,82,92,92,87,91,82,0,69,92,92,92,98,0,82,82,0,0,0,82,82,82,82,92,82,92,91,91,92,0,0,98,82,82,98,0,0,0,0,0,0,0,0,82,0,0,0,0,0,0,82,0,0,82,92,91,0,82,0,82,0,0,0,0,98,82,82,98,0,144,91,92,69,0,89,12,69,144,144,144,80,80,43,7,43,7,145,80,7,80,43,83,89,89,12,12,12,89,92,80,89,92,12,12,12,89,12,89,12,91,92,91,92,91,92,91,92,91,92,12,91,92,91,92,80,103,89,89,12,12,69,91,43,43,83,98,87,92,82,80,103,89,12,69,91,43,83,98,87,92,82,7,80,43,83,69,80,89,12,87,144,89,12,89,12,69,89,12,69,91,43,83,98,87,92,82,89,12,69,91,43,83,98,87,92,82,89,12,91,87,92,91,92,144,91,92,144,89,48,80,43,83,89,12,89,12,69,80,89,12,43,83,89,12,91,92,91,92,0,144,91,92,0,89,12,69,91,83,98,87,92,89,12,69,91,87,92,91,92,48,144,69,69,80,103,103,89,89,12,12,69,69,91,91,91,91,91,43,83,98,98,87,87,92,92,92,92,92,92,82,82,80,103,89,89,89,89,89,12,12,12,12,12,12,69,69,69,91,43,43,43,83,83,98,87,87,92,82,82,91,92,91,92,91,92,80,89,12,89,12,43,89,12,89,12,91,92,43,89,12,89,12,89,89,12,89,12,83,144,144,144,92,144,144,144,144,144,144,145,144,0,144,145,89,12,91,87,92,7,80,43,83,69,69,89,12,12,91,92,91,92,91,92,80,80,103,89,12,69,91,43,83,98,87,92,82,12,43,80,103,89,12,69,91,43,83,98,87,92,82,82,144,0,0,91,92,144,91,92,144,144,89,12,89,12,89,12,48,80,43,83,144,69,145,80,83,80,7,7,80,43,83,87,89,12,91,92,0,89,12,89,12,89,12,48,80,43,83,89,89,89,12,12,89,12,91,87,92,48,80,43,83,144,144,48,80,43,83,144,48,80,43,83,69,98,82,87,146,144,7,80,43,83,91,92,82,80,144,91,92,91,92,0,0,144,48,80,43,83,145,82,0,69,91,92,91,92,91,92,87,48,80,43,83,92,43,69,89,12,145,103,80,89,12,69,91,43,83,98,87,92,82,103,89,12,69,98,87,92,82,89,12,91,92,89,12,89,12,0,89,12,12,89,80,103,89,89,89,12,12,12,69,91,43,83,98,87,87,87,87,92,82,80,103,89,12,69,91,43,83,98,87,92,82,89,80,103,89,12,69,91,43,83,98,87,92,82,69,89,89,89,89,92,91,92,89,80,103,89,12,69,91,43,83,98,87,92,82,69,89,12,147,0,0,0,0,0,58,127,57,126,129,130,131,132,148,133,0,0,0,0,0,0,58,127,57,126,129,130,131,132,128,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,0,0,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,128,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,128,58,127,57,126,129,130,131,132,128,58,58,58,127,127,127,57,57,57,126,126,126,129,129,129,130,130,130,131,131,131,132,132,132,133,133,128,58,58,58,58,127,127,127,127,57,57,57,57,126,126,126,126,129,129,129,129,130,130,130,130,131,131,131,131,132,132,132,132,133,128,128,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,58,58,127,127,127,57,57,57,126,126,126,129,129,129,130,130,130,131,131,131,132,132,132,133,128,58,127,57,126,129,130,131,132,133,128,129,130,131,132,58,127,57,126,129,130,131,132,128,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,133,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,128,58,127,57,126,129,130,131,132,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,133,129,130,131,132,58,58,58,127,127,127,57,57,57,126,126,126,129,129,129,130,130,130,131,131,131,132,132,132,133,128,128,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,133,128,58,127,57,126,129,130,131,132,133,128,149,149,135,135,135,135,134,135,135,135,135,135,135,135,0,135,134,135,134,135,135,0,135,135,0,134,0,135,135,135,135,135,135,135,135,134,13,135,134,13,135,134,13,135,134,13,135,134,135,135,13,135,135,134,13,135,134,135,134,135,13,135,134,13,135,134,134,0,0,0,0,0,0,0,13,135,134,13,135,134,13,135,134,135,13,135,134,13,135,134,13,135,134,0,0,8,137,8,137,8,8,137,137,8,137,8,137,8,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,137,8,137,8,137,0,8,137,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],0,0,[[1,2],[[4,[3]]]],[[]],[[],1],[[[0,[5,6]]],1],[[7,8],9],[[]],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[12,[[11,[10]]]]]],[1,[[11,[10]]]],0,0,[[13,8,14,15,15]],[[]],0,[[],4],[[[11,[10]]],[[4,[1,16]]]],[[],4],[[],17],0,[[]],0,0,[[[19,[[18,[10]]]],20],21],[[20,[23,[22]]],[[25,[[24,[10]]]]]],[[20,[18,[10]],26],25],[[[19,[[18,[10]]]],20,27],[[25,[21]]]],0,0,0,0,[[]],[[]],[[]],[[]],[22,22],[[]],[[],28],[22,[[25,[28]]]],[[],22],[[],28],[[]],[[],22],[7,22],[[[18,[[18,[10]]]]],22],[[],22],[[]],[[[11,[[18,[10]]]]],22],[[]],[[]],[[],4],[[],4],[[[29,[8]],22,27],[[25,[28]]]],0,[[]],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[8,13],[[25,[30]]]],0,0,0,0,0,[[]],[[]],[31,31],[[]],[[],31],0,[[31,2],32],[[]],0,0,[[]],[[],4],[[31,33],[[25,[13]]]],[[8,31,33,34],[[25,[27]]]],[31,[[25,[35]]]],[[8,31,26],25],0,0,[[[18,[15]]],36],[[[18,[10]]],36],[[]],[[],4],[[],4],[[],17],[[]],[[8,[29,[[18,[10]]]],[29,[20]],27],[[25,[1]]]],[[20,[18,[10]]],[[25,[1]]]],[[1,[18,[10]]],21],[20,[[25,[37]]]],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[38,7,39],[[4,[40]]]],0,[[[42,[[0,[7,41]]]]],43],[[[44,[[0,[7,41]]]]],[[47,[45,46]]]],[[[44,[[0,[7,41]]]]],48],[[[49,[[0,[7,41]]]]],48],[[[42,[[0,[7,41]]]]],48],[[[18,[10]]],[[12,[[11,[10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[0,[7,41]]]]],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[19,[[18,[10]]]]]]],[[52,[[18,[10]]]]]],0,[[[44,[[0,[7,41]]]]],53],[[[49,[[0,[7,41]]]]],53],[[[42,[[0,[7,41]]]]],53],[[38,7,39],[[4,[40]]]],[[[18,[10]]],54],[26,[[55,[26]]]],[[[55,[56,56]]],[[55,[56,56]]]],[[[51,[56,56]]],[[51,[56,56]]]],[38,38],[[[44,[[0,[56,41]]]]],[[44,[[0,[56,41]]]]]],[[[49,[[0,[56,41]]]]],[[49,[[0,[56,41]]]]]],[[[42,[[0,[56,41]]]]],[[42,[[0,[56,41]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[19,[[18,[10]]]]]]],57],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[[51,[[19,[[18,[10]]]]]]],58],[[[44,[41]]]],[[[49,[41]]]],[[[42,[41]]]],[59,[[4,[[51,[60,60]]]]]],[[38,7,39],[[4,[61]]]],[[[51,[[62,[[62,[[62,[62]]]]]],[62,[[62,[[62,[62]]]]]]]],[51,[[62,[[62,[[62,[62]]]]]],[62,[[62,[[62,[62]]]]]]]]],27],[[38,38],27],[[],27],[38,[[29,[63]]]],[[[51,[[19,[[18,[10]]]],[19,[[18,[10]]]]]],2],[[4,[3]]]],[[38,2],[[4,[3]]]],[[38,2],[[4,[3]]]],[[[44,[[0,[64,41]]]],2],[[4,[3]]]],[[[49,[[0,[64,41]]]],2],[[4,[3]]]],[[[42,[[0,[64,41]]]],2],[[4,[3]]]],[[]],[[]],[[]],[[]],[[]],[7,[[49,[[65,[7]]]]]],[[]],[[]],[[],[[51,[[18,[10]],[11,[10]]]]]],[7,[[49,[[65,[7]]]]]],[[57,7],[[29,[[51,[[24,[10,46]],[11,[10]]]]]]]],[20,[[4,[38]]]],[[[55,[26,26]],7,8],9],0,[[[51,[[19,[[18,[10]]]]]]],[[12,[[11,[10]]]]]],[[[44,[[0,[7,41]]]]],[[12,[[11,[10]]]]]],[[[49,[[0,[7,41]]]]],[[12,[[11,[10]]]]]],[[[42,[[0,[7,41]]]]],[[12,[[11,[10]]]]]],[38,66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,7],21],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],[[29,[67]]]],[[],[[29,[67]]]],[[],[[29,[67]]]],[[[51,[[19,[[18,[10]]]]]]],58],[[[51,[[19,[[18,[10]]]]]]],57],[[49,68],49],[[38,69],[[29,[[18,[10]]]]]],0,[[[44,[[0,[7,41]]]]],[[29,[69]]]],[[[44,[[0,[7,41]]]]],69],[[[49,[[0,[7,41]]]]],69],[[[42,[[0,[7,41]]]]],69],[7,[[44,[7]]]],[7,[[42,[7]]]],[[13,8,14,15,15]],[[[49,[7]]],[[49,[[47,[45,46]]]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[[51,[[70,[[70,[[70,[70]]]]]],[70,[[70,[[70,[70]]]]]]]],[51,[[70,[[70,[[70,[70]]]]]],[70,[[70,[[70,[70]]]]]]]]],[[29,[71]]]],[[],72],[[],72],[[],72],0,0,0,[[],53],[[],53],[[],53],[[],73],[[],73],[[],73],0,[[[44,[[0,[7,41]]]]],[[29,[57]]]],[[[49,[[0,[7,41]]]]],[[29,[57]]]],[[[42,[[0,[7,41]]]]],[[29,[57]]]],0,[[[51,[74,74]],75],4],[[],[[29,[76]]]],[[],[[29,[76]]]],[[],[[29,[76]]]],[[[55,[26,26]],13,8,14,15,15]],0,[[],[[29,[77]]]],[[],[[29,[77]]]],[[],[[29,[77]]]],[[]],[[[51,[[18,[10]],[11,[10]]]]],[[51,[[24,[10,46]],[11,[10]]]]]],[[]],[[]],[[]],[[]],[[]],[[],21],[26,[[55,[26]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[18,[10]]],[[29,[38]]]],[20,[[29,[38]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[38,78],[[29,[[24,[79,46]]]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[10]],27],[[4,[[81,[80]],82]]]],[[[18,[10]]],[[25,[35]]]],[[[18,[10]]],[[25,[83]]]],[[1,[18,[10]],84,85,86,[18,[87]],[29,[33]]],[[25,[35]]]],[[1,[18,[10]],84,85,86,[18,[87]],[29,[33]]],[[25,[83]]]],[[[18,[10]],84,85,86,[18,[87]],[29,[33]]],[[25,[35]]]],[[[18,[10]],84,85,86,[18,[87]],[29,[33]]],[[25,[83]]]],[[[18,[10]],27],[[4,[82]]]],[[[18,[10]],27],[[4,[82]]]],[[7,27,39],88],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[18,[10]]],[[89,[[11,[10]]]]]],[[],90],[[],91],[[],92],[[69,91,91],69],[[[18,[10]],27],[[81,[20]]]],[[[89,[[11,[10]]]],26]],[[[12,[[11,[10]]]],26]],[69,[[11,[10]]]],[[],[[29,[[18,[10]]]]]],[[],29],[[],[[29,[93]]]],[80,45],[80,43],[43,43],[[],43],[43,[[47,[45,46]]]],[[],[[47,[45,46]]]],[41,83],[80,[[18,[10]]]],[[],48],[80,48],[43,48],[83,48],[[[89,[[19,[[18,[10]]]]]]],[[18,[10]]]],[89],[12],[[[12,[[19,[[18,[10]]]]]]],[[18,[10]]]],[[[12,[[11,[94]]]]],[[11,[10]]]],[[89,27],[[18,[10]]]],[92,[[47,[95,46]]]],[80,45],[[89,27],[[81,[20]]]],[92,20],[12,21],[[12,21]],[12,21],[[[89,[[11,[10]]]],[89,[[11,[10]]]]],[[89,[[11,[10]]]]]],[[[12,[[11,[10]]]],[12,[[11,[10]]]]],[[12,[[11,[10]]]]]],[[[89,[[11,[10]]]],[89,[[11,[10]]]]],[[89,[[11,[10]]]]]],[[[12,[[11,[10]]]],[12,[[11,[10]]]]],[[12,[[11,[10]]]]]],[[91,91],91],[[92,92],92],[[91,91]],[[92,92]],[[91,91],91],[[92,92],92],[[91,91]],[[92,92]],[91,10],[92,10],[[[12,[[11,[10]]]],[12,[[11,[10]]]]]],[[91,91],91],[[92,92],92],[[91,91]],[[92,92]],[[]],[[]],[[[89,[[96,[[18,[10]]]]]]],[[18,[10]]]],[[]],[[]],[12],[[]],[[]],[43,50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],53],[80,53],[43,53],[83,53],[[[11,[10]]],69],[[80,27],[[4,[[18,[10]],82]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[],[[4,[82]]]],[[[89,[[11,[10]]]],[89,[[11,[10]]]]],[[29,[[89,[[11,[10]]]]]]]],[[[12,[[11,[10]]]],[12,[[11,[10]]]]],[[29,[[12,[[11,[10]]]]]]]],[[[89,[[11,[10]]]],[89,[[11,[10]]]]],[[29,[[89,[[11,[10]]]]]]]],[[[12,[[11,[10]]]],[12,[[11,[10]]]]],[[29,[[12,[[11,[10]]]]]]]],[69,[[11,[10]]]],[[[89,[[0,[56,41]]]]],[[89,[[0,[56,41]]]]]],[[[12,[56]]],[[12,[56]]]],[69,69],[91,91],[43,43],[83,83],[98,98],[87,87],[92,92],[82,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[89,[[0,[99,41]]]],[89,[[0,[99,41]]]]],71],[[[12,[99]],[12,[99]]],71],[[91,91],71],[[87,87],71],[[92,92],71],[91,91],[92,92],[[],[[12,[[11,[10]]]]]],[[91,91],27],[[92,92],27],[[],[[29,[57]]]],[89,[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[[89,[[11,[10]]]]],[[29,[[89,[[11,[10]]]]]]]],[[[12,[[11,[10]]]]],[[29,[[12,[[11,[10]]]]]]]],[[],[[89,[[0,[100,41]]]]]],[[],[[12,[100]]]],[[],69],[80],[89],[12],[43],[83],[89],[12],[59,[[4,[91]]]],[59,[[4,[92]]]],[[91,91],91],[[92,92],92],[[],[[89,[[11,[10]]]]]],[[],[[29,[[89,[[11,[10]]]]]]]],[[],91],[[],92],0,[[[89,[[0,[[62,[[0,[[62,[[0,[[62,[[0,[62,41]]]],41]]]],41]]]],41]]]],[89,[[0,[[62,[[0,[[62,[[0,[[62,[[0,[62,41]]]],41]]]],41]]]],41]]]]],27],[[[12,[[62,[[62,[[62,[62]]]]]]]],[12,[[62,[[62,[[62,[62]]]]]]]]],27],[[69,69],27],[[91,91],27],[[83,83],27],[[98,98],27],[[87,87],27],[[92,92],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[91,101]],[[92,101]],[[],102],[[],102],0,[69,10],[[80,2],[[4,[3]]]],[[103,2],[[4,[3]]]],[[103,2],[[4,[3]]]],[[89,2],[[4,[3]]]],[[89,2],[[4,[3]]]],[[12,2],[[4,[3]]]],[[12,2],[[4,[3]]]],[[69,2],[[4,[3]]]],[[69,2],[[4,[3]]]],[[91,2],[[4,[3]]]],[[91,2],[[4,[3]]]],[[91,2],[[4,[3]]]],[[91,2],[[4,[3]]]],[[91,2],[[4,[3]]]],[[43,2],[[4,[3]]]],[[83,2],[[4,[3]]]],[[98,2],[[4,[3]]]],[[98,2],[[4,[3]]]],[[87,2],[[4,[3]]]],[[87,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[92,2],[[4,[3]]]],[[82,2],[[4,[3]]]],[[82,2],[[4,[3]]]],[[]],[[]],[104],[[],89],[[]],[94,[[89,[[11,[10]]]]]],[[[18,[10]]],[[89,[[18,[10]]]]]],[[]],[104],[105,[[12,[[11,[10]]]]]],[69,[[12,[[11,[10]]]]]],[[],12],[105,[[12,[[11,[10]]]]]],[106,69],[[[12,[[11,[10]]]]],69],[[]],[[]],[[]],[83,43],[7,43],[7,83],[[]],[[]],[[]],[[],87],[[]],[98,82],[[]],[10,[[29,[91]]]],[10,[[29,[92]]]],[10,91],[10,92],[10,91],[10,92],[[[18,[10]]],80],[107],[107],[107],[107],[[108,27,68],[[4,[43,82]]]],[109],[109],[110],[110],[101,91],[101,92],[50,43],[41,[[89,[41]]]],[[],12],[107],[107],[20,[[4,[[89,[[24,[10,46]]]]]]]],[20,[[4,[[89,[[11,[10]]]]]]]],[20,[[4,[[12,[[11,[10]]]]]]]],[94,[[89,[[11,[10]]]]]],[105,[[12,[[11,[10]]]]]],[[69,[12,[[11,[10]]]],72],83],[[],57],[[],[[4,[20,111]]]],[[],[[89,[[11,[10]]]]]],[92,112],[[],[[12,[[11,[10]]]]]],[[],[[113,[[18,[10]]]]]],[[],[[18,[87]]]],[[],[[114,[[18,[10]]]]]],[[],10],[[],[[12,[[11,[10]]]]]],[[],57],[[],[[12,[[11,[10]]]]]],[[],[[12,[[11,[10]]]]]],[[],[[29,[[12,[[11,[10]]]]]]]],[[],[[12,[[11,[10]]]]]],[[[89,[[0,[115,41]]]],116]],[[[12,[115]],116]],[[91,116]],[[87,116]],[[92,116]],[[],[[12,[[11,[10]]]]]],[80,[[12,[[11,[10]]]]]],[43,[[12,[[11,[10]]]]]],[83,[[12,[[11,[10]]]]]],[69,69],0,[[[89,[[11,[10]]]]],[[29,[[89,[[11,[10]]]]]]]],[[[12,[[11,[10]]]]],[[29,[[12,[[11,[10]]]]]]]],[12],[[91,91]],[[92,92]],[[91,91],91],[[92,92],92],[[91,91],27],[[92,92],27],[80,108],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,[[11,[10]]]],[43,50],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[82,40],[[],[[29,[[113,[[18,[10]]]]]]]],[[[11,[10]]],[[113,[[11,[10]]]]]],[[[18,[[18,[10]]]]],[[113,[[24,[10,46]]]]]],[91,27],[92,27],[[],27],[91,27],[92,27],[[],27],[[],27],[[],27],[[],27],[[[89,[[11,[10]]]]],15],[[[12,[[11,[10]]]]],15],[[[89,[[11,[10]]]]],15],[[[12,[[11,[10]]]]],15],[[],[[29,[67]]]],[[],[[29,[67]]]],[[],[[29,[67]]]],[[],[[29,[67]]]],[[],[[29,[[18,[87]]]]]],[69,10],[[],69],0,0,[80,[[29,[69]]]],[[],[[29,[69]]]],[[],69],[80,69],[43,69],[83,69],[[[19,[[18,[10]]]],[23,[[12,[[11,[10]]]]]]],87],[[[89,[[11,[10]]]]],[[89,[[11,[10]]]]]],[[[12,[[11,[10]]]]],[[12,[[11,[10]]]]]],[91,91],[92,92],[[],57],[[[89,[[11,[10]]]],[89,[[11,[10]]]]]],[[[12,[[11,[10]]]],[12,[[11,[10]]]]]],[[[89,[[11,[10]]]],15]],[[[12,[[11,[10]]]],15]],[[[89,[[11,[10]]]],15]],[[[12,[[11,[10]]]],15]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[],[[18,[10]]]],[[[89,[[18,[10]]]]],[[4,[117]]]],[[[19,[[18,[10]]]]],[[4,[[89,[[11,[10]]]],118]]]],[[[89,[[18,[10]]]]],[[4,[117,119]]]],[[[19,[[18,[10]]]]],[[4,[[12,[[24,[10,46]]]],120]]]],[[[19,[[18,[10]]]]],[[4,[[12,[[11,[10]]]],120]]]],[[[89,[[0,[[70,[[0,[[70,[[0,[[70,[[0,[70,41]]]],41]]]],41]]]],41]]]],[89,[[0,[[70,[[0,[[70,[[0,[[70,[[0,[70,41]]]],41]]]],41]]]],41]]]]],[[29,[71]]]],[[[12,[[70,[[70,[[70,[70]]]]]]]],[12,[[70,[[70,[[70,[70]]]]]]]]],[[29,[71]]]],[[91,91],[[29,[71]]]],[[87,87],[[29,[71]]]],[[92,92],[[29,[71]]]],[[],72],[[],72],[[],72],[[],72],[[],[[29,[[114,[[18,[10]]]]]]]],[[],[[29,[10]]]],[[],53],[[],53],[[],53],[[],53],[[],73],[[],73],[[],73],[[],73],[[],73],0,[121],[121],0,[[],[[12,[[11,[10]]]]]],[[],[[29,[[12,[[11,[10]]]]]]]],[[],[[29,[57]]]],[80,[[29,[57]]]],[43,[[29,[57]]]],[83,[[29,[57]]]],[[91,91]],[[92,92]],[82,[[29,[63]]]],[[80,69],[[44,[80]]]],[[],122],[[91,75],4],[[92,75],4],[[91,91,27]],[[92,92,27]],[[[89,[[11,[10]]]]]],[[[12,[[11,[10]]]]]],[[],[[29,[[12,[[11,[10]]]]]]]],[[],[[29,[76]]]],[[],[[29,[76]]]],[[],[[29,[76]]]],[[],[[29,[76]]]],[[],90],[82,[[29,[123]]]],[[[18,[[18,[10]]]]],[[114,[[24,[10,46]]]]]],0,[[91,91],91],[[92,92],92],[[91,91]],[[92,92]],[[91,91],91],[[92,92],92],0,[[],[[29,[77]]]],[[],[[29,[77]]]],[[],[[29,[77]]]],[[],[[29,[77]]]],[[92,80],27],[43,50],[69,[[24,[79,46]]]],[89,21],[12,21],[[],21],[[103,124,27,[29,[26]]],[[4,[3]]]],[80],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[89,[[11,[10]]]]],94],[[[12,[[11,[10]]]]],105],[[91,91]],[[92,92]],[[[89,[[11,[10]]]]],15],[[[12,[[11,[10]]]]],15],[[[89,[[11,[10]]]]],15],[[[12,[[11,[10]]]]],15],[[[18,[10]]],[[4,[[89,[[11,[10]]]],125]]]],[[[18,[10]]],[[4,[[89,[[11,[10]]]],125]]]],[[[18,[10]]],[[4,[[12,[[11,[10]]]],120]]]],[[[18,[10]]],[[4,[[12,[[11,[10]]]],125]]]],[[[18,[10]]],[[4,[[89,[[11,[10]]]],125]]]],[[],4],[[],4],[78,[[4,[[89,[[11,[10]]]]]]]],[[[18,[10]]],[[4,[[89,[[11,[10]]]]]]]],[[],4],[[[18,[10]]],[[4,[[12,[[11,[10]]]]]]]],[[],4],[78,[[4,[[12,[[11,[10]]]]]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],[[4,[87]]]],[78,[[4,[87]]]],[[[19,[[18,[10]]]],[12,[[11,[10]]]]],[[4,[87,125]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[89,[[11,[10]]]]],[[81,[20]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[[89,[[11,[10]]]]],126],[[[89,[[11,[10]]]]],57],[[[89,[[11,[10]]]]],127],[[[89,[[11,[10]]]]],58],[10,92],[[91,91],91],[[92,92],92],[[[89,[[11,[10]]]]],[[4,[20,111]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[69,91],69],[[89,26]],[[12,26]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[128,[[24,[79,46]]]],[58,[[11,[90]]]],[127,[[11,[15]]]],[57,[[11,[36]]]],[126,[[11,[94]]]],[129,[[11,[90]]]],[130,[[11,[15]]]],[131,[[11,[36]]]],[132,[[11,[94]]]],[58,[[18,[10]]]],[127,[[18,[10]]]],[57,[[18,[10]]]],[126,[[18,[10]]]],[129,[[18,[10]]]],[130,[[18,[10]]]],[131,[[18,[10]]]],[132,[[18,[10]]]],[[[18,[10]],2],[[4,[3]]]],[[[18,[10]]],21],[[58,58]],[[127,127]],[[57,57]],[[126,126]],[[129,129]],[[130,130]],[[131,131]],[[132,132]],[[58,58]],[[127,127]],[[57,57]],[[126,126]],[[129,129]],[[130,130]],[[131,131]],[[132,132]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[[[18,[79]]],[[4,[97]]]],[58,58],[127,127],[57,57],[126,126],[129,129],[130,130],[131,131],[132,132],[133,133],[128,128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,58],71],[[127,127],71],[[57,57],71],[[126,126],71],[[129,129],71],[[130,130],71],[[131,131],71],[[132,132],71],[[],58],[[],127],[[],57],[[],126],[[],129],[[],130],[[],131],[[],132],[58],[127],[57],[126],[129],[130],[131],[132],[59,[[4,[58]]]],[59,[[4,[127]]]],[59,[[4,[57]]]],[59,[[4,[126]]]],[59,[[4,[129]]]],[59,[[4,[130]]]],[59,[[4,[131]]]],[59,[[4,[132]]]],[[58,58],27],[[127,127],27],[[57,57],27],[[126,126],27],[[129,129],27],[[130,130],27],[[131,131],27],[[132,132],27],[[128,128],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[58,2],[[4,[3]]]],[[58,2],[[4,[3]]]],[[58,2],[[4,[3]]]],[[127,2],[[4,[3]]]],[[127,2],[[4,[3]]]],[[127,2],[[4,[3]]]],[[57,2],[[4,[3]]]],[[57,2],[[4,[3]]]],[[57,2],[[4,[3]]]],[[126,2],[[4,[3]]]],[[126,2],[[4,[3]]]],[[126,2],[[4,[3]]]],[[129,2],[[4,[3]]]],[[129,2],[[4,[3]]]],[[129,2],[[4,[3]]]],[[130,2],[[4,[3]]]],[[130,2],[[4,[3]]]],[[130,2],[[4,[3]]]],[[131,2],[[4,[3]]]],[[131,2],[[4,[3]]]],[[131,2],[[4,[3]]]],[[132,2],[[4,[3]]]],[[132,2],[[4,[3]]]],[[132,2],[[4,[3]]]],[[133,2],[[4,[3]]]],[[133,2],[[4,[3]]]],[[128,2],[[4,[3]]]],[[]],[90,58],[129,58],[[[11,[10]]],58],[130,127],[[]],[[[11,[10]]],127],[15,127],[131,57],[36,57],[[]],[[[11,[10]]],57],[94,126],[[[11,[10]]],126],[[]],[132,126],[[[11,[10]]],129],[58,129],[[]],[90,129],[[[11,[10]]],130],[15,130],[[]],[127,130],[[[11,[10]]],131],[[]],[36,131],[57,131],[[[11,[10]]],132],[94,132],[[]],[126,132],[[]],[[]],[91,128],[20,[[4,[58]]]],[20,[[4,[127]]]],[20,[[4,[57]]]],[20,[[4,[126]]]],[20,[[4,[129]]]],[20,[[4,[130]]]],[20,[[4,[131]]]],[20,[[4,[132]]]],[58,90],[127,15],[57,36],[126,94],[129,90],[130,15],[131,36],[132,94],[[58,116]],[[127,116]],[[57,116]],[[126,116]],[[129,116]],[[130,116]],[[131,116]],[[132,116]],[58,58],[127,127],[57,57],[126,126],[129,129],[130,130],[131,131],[132,132],[58,90],[58,[[11,[10]]]],[[]],[[]],[127,[[11,[10]]]],[127,15],[57,[[11,[10]]]],[57,36],[[]],[126,94],[[]],[126,[[11,[10]]]],[[]],[129,[[11,[10]]]],[129,90],[[]],[130,[[11,[10]]]],[130,15],[[]],[131,[[11,[10]]]],[131,36],[132,94],[132,[[11,[10]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[129,[[24,[79,46]]]],[130,[[24,[79,46]]]],[131,[[24,[79,46]]]],[132,[[24,[79,46]]]],[90,58],[15,127],[36,57],[94,126],[90,129],[15,130],[36,131],[94,132],[10,128],[58],[127],[57],[126],[129],[130],[131],[132],[[58,58],[[29,[71]]]],[[127,127],[[29,[71]]]],[[57,57],[[29,[71]]]],[[126,126],[[29,[71]]]],[[129,129],[[29,[71]]]],[[130,130],[[29,[71]]]],[[131,131],[[29,[71]]]],[[132,132],[[29,[71]]]],[121],[[58,58],58],[[127,127],127],[[57,57],57],[[126,126],126],[[129,129],129],[[130,130],130],[[131,131],131],[[132,132],132],[[58,58],58],[[127,127],127],[[57,57],57],[[126,126],126],[[129,129],129],[[130,130],130],[[131,131],131],[[132,132],132],[[58,75],4],[[127,75],4],[[57,75],4],[[126,75],4],[[129,75],4],[[130,75],4],[[131,75],4],[[132,75],4],[[58,90]],[[127,15]],[[57,36]],[[126,94]],[[129,90]],[[130,15]],[[131,36]],[[132,94]],[58,[[24,[79,46]]]],[127,[[24,[79,46]]]],[57,[[24,[79,46]]]],[126,[[24,[79,46]]]],[129,[[24,[79,46]]]],[130,[[24,[79,46]]]],[131,[[24,[79,46]]]],[132,[[24,[79,46]]]],[128,[[24,[79,46]]]],[58,[[11,[10]]]],[127,[[11,[10]]]],[57,[[11,[10]]]],[126,[[11,[10]]]],[129,[[11,[10]]]],[130,[[11,[10]]]],[131,[[11,[10]]]],[132,[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[[18,[10]]],[[4,[129,125]]]],[[[18,[10]]],[[4,[130,125]]]],[[[18,[10]]],[[4,[131,125]]]],[[[18,[10]]],[[4,[132,125]]]],[[],4],[78,[[4,[58]]]],[[[18,[10]]],[[4,[58]]]],[[[18,[10]]],[[4,[127]]]],[78,[[4,[127]]]],[[],4],[[[18,[10]]],[[4,[57]]]],[[],4],[78,[[4,[57]]]],[[],4],[78,[[4,[126]]]],[[[18,[10]]],[[4,[126]]]],[78,[[4,[129]]]],[[],4],[[[18,[10]]],[[4,[129]]]],[78,[[4,[130]]]],[[],4],[[[18,[10]]],[[4,[130]]]],[78,[[4,[131]]]],[[[18,[10]]],[[4,[131]]]],[[],4],[78,[[4,[132]]]],[[[18,[10]]],[[4,[132]]]],[[],4],[[],4],[78,[[4,[128]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[134,[[24,[10,46]]]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[135,135],[134,134],[[]],[[]],[[]],[[135,135],27],[[],27],[[13,2],32],[[135,2],[[4,[3]]]],[[135,2],[[4,[3]]]],[[134,2],[[4,[3]]]],[[]],[[]],[[]],[20,[[4,[135]]]],[20,[[4,[134]]]],[135,136],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],95],[30,13],[13,13],[13],[13,[[25,[[47,[26]]]]]],[[13,[18,[20]],[23,[22]]],[[25,[13]]]],[[13,27],21],[[13,20,20,[18,[10]]],[[25,[13]]]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],4],[[],4],[[],4],[[[18,[10]]],[[29,[135]]]],[[],4],[[],4],[[],4],[[],17],[[],17],[[],17],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[8,8],[[]],0,[[137,2],32],[[]],[[]],[[]],[[]],[[],4],[[],4],[[8,13],[[25,[[29,[35]]]]]],[[8,13,26],[[25,[138]]]],[[8,30,26],[[139,[29]]]],[[8,13,26],[[25,[29]]]],[8,137],[[8,26]],[[[29,[140]],27],[[88,[8]]]],[8,33],[[8,[29,[141]],33],[[25,[142]]]],[[8,7],[[88,[27]]]],[[8,[18,[7]]],[[88,[63]]]],[[8,[18,[10]],27]],[[8,13,34],[[25,[138]]]],[[8,13,34,143],[[25,[138]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[20,143],[[]],[[]],[[28,20],[[25,[[24,[10]]]]]],[[28,8,[29,[[18,[10]]]],[29,[20]],27],[[25,[1]]]],[[28,13,[18,[20]]],[[25,[13]]]],[[28,[18,[10]],20,27],[[25,[21]]]]],"c":[],"p":[[3,"SigningKey"],[3,"Formatter"],[3,"Error"],[4,"Result"],[8,"RngCore"],[8,"CryptoRng"],[8,"NetPkt"],[3,"Linkspace"],[4,"ControlFlow"],[15,"u8"],[15,"array"],[3,"B64"],[3,"Query"],[4,"StopReason"],[15,"u32"],[3,"Error"],[3,"TypeId"],[15,"slice"],[8,"AsRef"],[15,"str"],[3,"String"],[3,"UserData"],[8,"Into"],[3,"Vec"],[6,"LkResult"],[8,"FnMut"],[15,"bool"],[3,"LkCtx"],[4,"Option"],[6,"LkHash"],[3,"LkStatus"],[6,"Result"],[6,"Stamp"],[8,"PktHandler"],[6,"NetPktBox"],[15,"u64"],[6,"PubKey"],[4,"FieldEnum"],[8,"Write"],[3,"Error"],[8,"Sized"],[3,"ShareArcPkt"],[3,"NetPktArc"],[3,"ReroutePkt"],[3,"NetPktFatPtr"],[3,"Global"],[3,"Box"],[8,"Point"],[3,"RecvPkt"],[3,"NetPktArcPtr"],[3,"TreeEntry"],[3,"TreeKey"],[3,"ByteSegments"],[15,"f64"],[3,"Cb"],[8,"Clone"],[3,"U64"],[3,"U16"],[8,"Deserializer"],[8,"Deserialize"],[3,"Error"],[8,"PartialEq"],[15,"usize"],[8,"Debug"],[8,"From"],[3,"FieldInfo"],[3,"LinkPointHeader"],[8,"FnOnce"],[3,"NetPktHeader"],[8,"PartialOrd"],[4,"Ordering"],[3,"PointParts"],[3,"PointHeader"],[8,"Serialize"],[8,"Serializer"],[3,"Signed"],[3,"Tail"],[3,"ABList"],[4,"ABE"],[3,"NetPktPtr"],[4,"Cow"],[4,"PktError"],[3,"NetPktParts"],[6,"Domain"],[6,"GroupID"],[6,"IPath"],[3,"Link"],[6,"Result"],[3,"AB"],[15,"u16"],[3,"NetFlags"],[3,"PointTypeFlags"],[3,"LinkPoint"],[15,"u128"],[8,"Iterator"],[8,"Borrow"],[3,"MatchError"],[4,"PathError"],[8,"Ord"],[8,"Default"],[8,"IntoIterator"],[4,"PointFields"],[3,"PktFmt"],[15,"never"],[3,"Uint"],[4,"NetOpts"],[3,"OwnedFd"],[3,"PartialNetHeader"],[8,"IntoFilelike"],[8,"IntoSocketlike"],[3,"Utf8Error"],[4,"RuleType"],[3,"IPathBytes"],[3,"SPathBytes"],[8,"Hash"],[8,"Hasher"],[8,"FromStr"],[4,"ABTxtError"],[3,"ParseErr"],[4,"DecodeError"],[3,"Demand"],[3,"SelectLink"],[8,"Error"],[8,"Write"],[3,"FitSliceErr"],[3,"U128"],[3,"U32"],[3,"U8"],[3,"LU16"],[3,"LU32"],[3,"LU64"],[3,"LU128"],[4,"TryFitSliceError"],[4,"KnownOptions"],[4,"PredicateType"],[3,"PredInfo"],[3,"LkInfo"],[15,"i32"],[6,"Result"],[3,"Path"],[6,"QueryIDRef"],[15,"isize"],[3,"Span"],[8,"PointExt"],[8,"NetPktExt"],[8,"SigningExt"],[13,"MissingBytes"],[8,"BigEndianUInt"],[13,"Overflow"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
