#+TITLE:  MineWeeper 
#+SUBTITLE: A Linkspace Application Tutorial
#+AUTHOR: Anton Sol

#+SETUPFILE: ../../utils.org
#+INCLUDE: "../../utils.js" export html 

#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../../../images/logo2.png">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./blog.css"/>

This is the first a [[../index.html][series]] of tutorials to showcase linkspace.

We'll follow Bob in his journey.

[[../images/bob-hi.png]]

He build the greatest and must impressive game ever.  
Or so he says.

The game is MineWeeper: A Multiplayer minesweeper clone where players take turns. 

These knowledge/skills are assumed:

- a little bit of python.
- Terminal access (You know ~cd~ and can google what ~xargs~ does if you're interested)
- the difference between a string and bytes
- What it means to set the seed for a random number generator.
- What a hash and public keys is.

You can think of linkspace as combining git and http.

One consequence is that, in linkspace, the responsibilities for things are different to what we're used to.

An application developer has drastically fewer responsibilities.
Things like networking, servers, registration, users, groups, and read/write access are all outside the scope of what an application has to deal with. 
The developer doesn't think about managing sockets, but only about:
bytes, linking to bytes, and reading bytes by link or a query such as path names.

This tutorial is about that developer, not about the user or the group. (Those don't exist yet)

Before you continue, please check this consent form to not hold Bob accountable for the dumb stuff you share and do.

#+BEGIN_EXPORT HTML
<div> 
<input type="checkbox" id="consent" name="consent">
<fieldset id="consent-form">
    <legend>Consent form</legend>
    <label for="consent">Click to Consent [ ] </label>
</fieldset>
<div id="consent-ok">
<img src="../images/bob-cheer.png" alt="bob-cheer.png">
<p>With that piece of vital and productive administration out of the way, let's check out what Bob has build</p>
</div>
</div>

#+END_export


* Bob's Hotseat MineWeeper

Bob's game is perfect, but there is a teeny-tiny, little, detail missing.

It only works in hotseat mode.
That is, every player has to be at the same keyboard taking turns.

Bob's a friendly guy, but he doesn't want you coming to his house.
Instead, he'll build something, such that others can enjoy his perfect game with their friends over the internet.

No problemo.

But first, how does the game work in hotseat mode?

It asks the user for a list of player names.
Players take turns entering which cell to reveal until someone reveals a mine or no more safe cells exist.

#+begin_py
#+INCLUDE: "../../../examples/mineweeper/mineweeper-hotseat.py" src python
#+end_py


#+begin_verse
To give it a try: clone the repository or download and extract latest release: https://github.com/AntonSol919/linkspace/releases (Potential out of date).
All paths and commands will be relative to this directory.
You can try the code with ~python ./examples/mineweeper/mineweeper-hotseat.py~
#+end_verse

Bob's a little disappointed with the graphics.
Maybe someday he'll make it a 3D VR experience.
[[../images/bob-doubt.png]]

#+begin_ctabs
#+begin_info
Contrary to Bob, we don't care much for the details of MineWeeper.
In case you're interested checkout the tab or open the code in ./app/mineweeper-py/mineweeper.py
#+end_info

#+begin_py
#+INCLUDE: "../../../examples/mineweeper/mineweeper.py" src python
#+end_py
#+end_ctabs

* Game on

After searching high and low for a method to share it with the world, our friend Bob reaches for enlightenment.

[[../images/bob-enlightend.png]]


He finds linkspace.

A thoroughly untested protocol with very few users.
But he figures it's the best solution to make MineWeeper a true multiplayer game.

With linkspace:
- his (user administrative) workload drops dramatically.
- the game will stay playable without him spending a penny. Forever.
- user network/account/group problems can be solved once (hopefully by someone else).

Bob might be a little biased. He suffers from PCSSD, or Post Customer Support Stress Disorder.

Developing linkspace system boils down to:

- Gather some bytes you want sent around in a packet.
- Optionally: set a path, add links to other packets, sign it.
- Save that packet.
- Build a query: a list of predicates for a packet (e.g. pubkey, hash, path). 
- Get or watch for those results.


For Bob, the linkspace library is an abstraction that moves bytes around between players.

In the linkspace world, Bob's game is a domain application.
A program providing a friendly interface reading/writing the bytes that the developer wants to be shared around.

#+begin_verse
When the program calls the 'lk_pull' function for a query, the requested bytes saved with lk_save on another machine eventually become available.
This is done by a linkspace group exchange process. A group exchange process is build like a domain application.
But its role is to exchange all packets with its group ID to the members that require it.
More on them another day.
#+end_verse

Bob recognizes that his game has two distinct phases.

- Finding the people to start playing it with.
- Taking turns to play the game.

He'll start with 'play the game', and build the lobby system for proposing/joining/starting a game later.

He's not set on the details, but every game starts with at least the players knowing:

- a list of (player names, pubkey).
- number of rows & columns.
- mine_rate.
- RNG seed.

#+begin_verse
In this setup everybody knows the board, but we'll touch on [[Cheating][Cheating]] later.
#+end_verse

For an initial test, Bob will assume three players agreed that the following packet is the start of a game.

 # #+BEGIN_SRC bash :session cli0 :exports result :results output verbatim :cache yes
 # cat ../../../examples/private/setup.pkt  | lk p
 # #+END_SRC

#+RESULTS[120bdb7bb9e047a26774463083e95ad81197dd8c]:
#+begin_example
type	LinkPoint
hash	VJPxHigyCAmXvPojLxAQzHGYOiZDHP46ztaPZzMm6to
group	[#:test]
domain	mineweeper
path	
pubkey	[@:none]
create	1682062494375521
links	0

data	278
{
    "rows":20,
    "columns": 20,
    "mine_rate":0.3,
    "players":[
        ["alice", "iyfplTMDFj3Jw8XwdfwvXs9ZVgwwYZNsQ3E7cS55kLQ"],
        ["bob", "qfurOQ2oTD1Xc9dQf_gX2MXbsbALdXQ_XemF0aTlj6U"],
        ["charlie", "2SYK3NlS8k4ELKWR6CmqIQAiPrMosr5LioK7456jnDY"]
    ]
}
#+end_example

Bob decides to encode this as JSON.
A 'seed' field doesn't seem to be necessary, the hash of the packet can fill the role.

#+begin_ctabs
#+begin_info
Bob isn't infallible, so in building this he needs to test it locally.
The ./emulate folder contains two script to create and connect two instances locally.
It requires tmux to be installed (available in most package managers)
#+end_info

#+begin_setup

You can create an instance with a basic exchange process by opening a terminal and:

#+begin_src bash
  source ./activate # Builds and updates the PATH, set LK_DIR to ./private
  # We want to emulate a entire group with multiple instances.
  ./emulate/host.session.tmux.sh # This creates a new instance in ./private/alice, with its own key, and starts a host process
#+end_src

Open a second terminal and execute the following to create additional instances that connects to the host.

#+begin_src bash
  source ./activate # to set the path
  # creates a new instance in ./private/bob , with its own key key, and automatically connect to the host alice.
  ./emulate/session.tmux.sh bob # change this name to add multiple sessions
#+end_src

The bottom panel is the exchange process, the middle panel is watching the log, the upper panel is to run applications.
You can test if the sessions are correctly connected by running ~linkmail.py~ and writing a message.

Finally, we have to create the game packet and share it.
Eventually this will be done with a lobby we'll create. Right now we have to manually create it for our test.
One method to do so is as follows:

#+begin_src bash 
  cd private
  cat ./*/emulate_name_key > setup.json
  # You'll have to edit this setup.json by hand to look like the json above.
  lk link mineweeper:[#:test] --data file:./setup.json | tee setup.pkt | lk printf

  # Manually save this packet to each instance
  find ./ -mindepth 1 -maxdepth 1 -type d -exec lk --dir "{}" save --pkt-in ./setup.pkt \;
#+end_src

You should see the middle panel print this new packet.

Finally, in each session we can use the upper panel to run:



#+end_setup
#+end_ctabs


* Multiplayer

The outline is as follows:

- open the linkspace instance and a signing key. 
- read the 'game_pkt' that starts the game by its hash.
- load the settings, including a list of [player names,pubkeys].

while not done:
- Print the state.
- If its our turn, make a choice and save the move info.
- Else wait for the current player to make a move.

#+begin_py
#+INCLUDE: "../../../examples/mineweeper/mineweeper-multiplayer.py" src python
#+end_py

#+begin_ctabs
#+begin_info

To start the mineweeper-multiplayer.py manually, we run the following in each session
#+begin_bash
mineweeper-multiplayer.py $( cat ../setup.pkt | lk p [hash:str] )
#+end_bash

#+end_info


#+end_ctabs

* Cheating

There are three ways to deal with cheating.

Four if you count Bobs disapproval as an option.

[[../images/bob-angry.png]]

Keep in mind what is normal today.

Opening a game on your phone or browser usually means it connects to a single host.
This host receives your moves, it checks their local hidden state, and return you a result.
In one sense this is better, only the host can cheat.
On the other hand, only the host can cheat and nobody would know about it.

*** Who cares?
The option you should take by default.
Most games _can_ be cheated, so the upside of making it more difficult has its limits.

Scrabble or Chess can use helper tools you can't detect.
Shooter games have aimbots and 'see-through-walls' cheats.

Most players are not cheaters, even if they could.
Trusting your peers save a lot of hassle.
For a game like MineWeeper that is usually enough.

*** Emulate host/client
One option is to emulate a host/client setup.
The first player could act as host and watch for turns and reply with the result.

A slight tweak already makes this more fair than what is normal today.
The host could have their game_pkt contain a link to a datapacket with the game field, without actually making it available.
Once the game is done, the host can release the packet and players could check if the host was honest.

*** Rng-esus died for your sins

There are a number of ways to define a set of rules that make the game random without anyone knowing the full mine map.

There are two obstacles:
- Agreeing on a random value nobody can tamper with.
- How to deal with the cell numbers that represent how many mines surround it.

One option to get a random number goes as follows:
Every player acknowledges the turn before applying it.
Once you have every ack packet you can combine the ack.hash bytes to get a random val nobody can tamper on their own.
#+begin_src python
  ack_link = Link("ack",player_turn_pkt.hash)
  # Its best to enforce a value for the 'create' stamp so there is less ambigiouty on what the 'correct' packet must look like
  ack_pkt = lk_keypoint( create=player_turn_pkt.create, link = [ack_link])~
  acked = dict()
  def collect_acks(ack_pkt):
      if list(ack_pkt.link) == [ack_link] and ack_pkt.create == ack_pkt.create:
          acked.insert(pkt.pubkey,pkt.hash)
          if len(acked) == players:
              return False

  lk_watch(lk,lk_query_parse(q,":qid:acks"),collect_acks)
  lk_process_while(qid="acks")
  seed = itertools.reduce(lambda xored, hash: xored ^ hash, acked.values())

#+end_src

That leaves us with the more difficult issue:

Showing the number of mines surrounding a cell, without letting cheaters peek into which ones are non-mines.

One solution is to postpone determining which cell has the mine.
We have to add a 'solver'.
Just like a non-cheater, the solver can calculate the probabilities of hidden fields based on the revealed cells.

With the random seed determined after making a move, and the cell mine probability adjusted for what is already revealed, cheating becomes impossible.

* A dose of reality

In the [[./02.html][next]] installment Bob will continue his journey to building the best game ever.
This time by building a lobby system so it's actually playable.

In the meantime, a little expectation management is in order.

Various components and systems required for linkspace are still in their early days.
It Works On My Machine^{tm}.
Some tools and standards don't exist yet or are only partially implemented.

It's a project to rebuild the internet into something better.
That means taking some steps backwards before going forward.
At the crrent version it has reached the usability of 1980's email.
It works, but its not pretty nor user friendly.

That being said, there are currently no breaking changes to Bob's program planned.
And every improvement to other systems improves the experience of using a linkspace application.
