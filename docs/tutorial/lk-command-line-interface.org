#+TITLE: lk - The Linkspace CLI
#+SUBTITLE: Getting started
#+AUTHOR: Anton Sol

#+SETUPFILE: ../utils.org

#+HTML_HEAD: <link rel="icon" type="image/x-icon" href="../../images/logo2.png">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css"/>

#+BEGIN_SRC bash :session cli0 :exports none
  cd /tmp
  export LK_DIR=/tmp/linkspace
#+END_SRC

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  lk --version
#+END_SRC

*** ~lk datapoint~

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  echo -n hello world! | lk datapoint | lk pktf
#+END_SRC

also usable as ~lk data~ and ~lk d~

#+begin_ctabs
#+begin_O
#+end_O
#+begin_help
#+BEGIN_SRC bash :session cli0 :exports results :results output verbatim
  lk data --help
#+END_SRC
#+end_help

#+begin_xxd
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  echo -n hello world! | lk data | xxd
#+END_SRC
#+end_xxd
#+end_ctabs

#+begin_ctabs
#+begin_info
~pktf~, and many other functions, take [[../guide/index.html#ABE][ABE]] input. A byte templating language.

src_bash[:exports both]{echo -n "hello" | lk d | lk pktf "[hash/?b] => [data]"}

src_bash[:exports both]{echo -n "hello" | lk d | lk pktf "[hash/?b/b/?b] => [data/b2]"}
#+end_info
#+end_ctabs



By default, ~lk data~ produces multiple packets by reading the maximum data size able to fit.
This behavior can be changed with the various ~--data-*~ commands (~lk data --help~)
The maximum size of the data field is ~2^{16}-512-4 = 65020~[fn:: The maximum point size is 2^{16}-512. The maximum packet size on the network is 2^{16}-512+64. This is to avoid fragmentation & slow edge cases whenever data sizes approach ~2^{16}.]

Wrapping 150000 bytes produces 3 data packets.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
    python -c 'print("-" * 150000)' | lk data > three_datapoints.lkp
    cat three_datapoints.lkp | lk pktf "[hash/?b] contains [data_size/?u] bytes"
#+END_SRC

*** Linkpoint

So far we're packing data into datapoint, but linkspace is also about linking points.

A ~linkpoint~ is a type of point that has a couple of additional fields: 

A (domain,group) tuple, to indicate the application and intended set of recipients.
A path to give it a useful name and query later.
A create stamp to add some order.


For our application we'll be using the "imageboard" domain, and stick to the [#:pub] group for now.

~lk~ has multiple ways of producing linkpoints. ~lk linkpoint~ is the most straight forward.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  lk link imageboard:[#:pub] -- \
     a_link:_K7me35u0a52_pk-wt6e-60MI-wmGHKlj7V9sp39r88 \
     other_link:vrQ7INX24wxbIOjqrdPLXhDlf9E16tk-cntuNltnpxQ \
      | lk pktf  # You can see the default pktf format with lk pktf --help
#+END_SRC



We can get fancy and use xargs;
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  cat three_datapoints.lkp | lk pktf "onetag:[hash:str]" | xargs lk link imageboard:[#:pub]:/a/pathname/for/this/point -- | lk pktf
#+END_SRC

linkpoints can contain data, set with one of the --data-* arguments.
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  echo hello | lk link ::/a/path --data-stdin | lk pktf [data]
#+END_SRC

Note that for linkpoints the total size is still 2^{16}-512. That means the free space for data is shared with the other fields.

If no domain:group is given the value of $LK_DOMAIN and $LK_GROUP are used. If neither is set they default to "\0" and "[#:pub] respectively.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  export LK_DOMAIN="imageboard"
  export LK_GROUP="[#:test]"
  lk link ::/a/path --data-str "hello world" | lk pktf 
#+END_SRC


** Keypoints

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  export LK_DOMAIN="imageboard"
  export LK_GROUP="[#:test]"
  lk link ::/a/path --data-str "hello world" | lk pktf 
#+END_SRC

** Collect
Using xargs to set the links is one option.
An alternative is the ~lk collect~.
We can take 
Adding an image is done by creating a linkpoint where the first path component indicates the name of the image.
The tag of the link is a decimal encoded [X, Y] coordinates.
Its ptr is a datapoint packet hash.
Building the collage is done by adding all images to a base image in 'create' order.
** Rewrite 

** Watch 

** Eval
You can use ~lk eval~ to run a single expression instead of for each packet in a stream.

src_bash[:exports both]{lk eval "[:hello] world"}

src_bash[:exports both]{lk eval "[:hello/?b] world"}

src_bash[:exports both]{lk eval "[:hello/?b/b] world"}

src_bash[:exports both]{lk eval "[now/?u]"}

src_bash[:exports both :results output]{lk eval "[now/s:str]"}

src_bash[:exports both :results output]{lk eval "[epoch/s:str]"}

src_bash[:exports both :results output]{lk eval "[epoch/s:delta]"}

*** LNS 

src_bash[:exports both :results output]{lk eval "[[#:0]/b]"}

src_bash[:exports both :results output]{lk eval "[[#:pub]/b]"}



#+begin_ctabs
#+begin_O
#+end_O
#+begin_help
#+BEGIN_SRC bash :session cli0 :exports results :results output verbatim
  lk eval [help]
#+END_SRC
#+end_help
#+end_ctabs

