#+TITLE: The Linkspace Guide

#+AUTHOR: Anton Sol

#+SETUPFILE: ../utils.org

#+BEGIN_VERSE
This document is kept up to date on a best effort basis.
Sometimes the Rust [[../cargo-doc/linkspace/index.html][linkspace]] docs is ahead of this guide.
#+END_VERSE

This is a technical document describing the linkspace packet format, and software library to create, query, and process those packets.
You should be familiar with either the [[../../code_intro.html][quick start]] or the [[../../why.html][why]].
If you're better with hands on experience or just want to see it put into practice check out the [[../tutorial/index.html][tutorials]].

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  lk --version
#+END_SRC

* Introduction

Linkspace is built on 4 concepts.

- [[Point]] - Bytes, potentially with a path and links to other points. A point combined with its hash and netheader form a packet.
- [[ABE]] - (Byte) templating for convenience.
- [[Query]] - A list of predicates and options for selecting packets.
- [[#linkspace][Linkspace]] - A multi-reader single-writer database for saving, and to query for existing and reacting to new packets.

With that foundation, common challenges are addressed by a set of [[Conventions]].

* Setup
:PROPERTIES:
:CUSTOM_ID: setup
:END:

This guide uses Python and (Bash) CLI snippets.

** Binary

The [[https://github.com/AntonSol919/linkspace/releases][zip]] contains the CLI and python library and the examples used in this document.

** Package manager

~pip install linkspace~

~cargo +nightly install linkspace-cli --git https://github.com/AntonSol919/linkspace~

** Build from source

~git clone https://github.com/AntonSol919/linkspace~

*** for users

 ~make install-lk install-python~

*** for development / debug builds

 ~source ./activate~ builds and sets PATH and PYTHONPATH env variables.

* API overview
:PROPERTIES:
:CUSTOM_ID: api
:END:

The linkspace API is a small set of functions that is mostly stable.
It is available as a Rust crate ~linkspace~ and binding for other languages follow the same API.

It consists of the following functions:

- [[Point]] creation
  - [[#lk_datapoint][lk_datapoint]]
  - [[#lk_linkpoint][lk_linkpoint]]
  - [[lk_keypoint]]

- [[ABE]] - (Byte) templating for convenience
  - [[lk_eval]]
  - [[lk_encode]]

- [[Query]] - Addressing and filtering of packets with predicates and options
  - [[lk_query]]
  - [[lk_query_parse]]
  - [[lk_query_push]]
  - [[lk_query_print]]

- [[Linkspace]] - A runtime to save and query for old and new packets.
  - [[lk_open]]
  - [[lk_save]]
  - [[lk_get]]
  - [[lk_get_all]]
  - [[lk_watch]]
  - [[lk_process]]
  - [[lk_process_while]]

- [[Conventions]] - Functions following a convention build on top of the core functions.
  - [[lk_status_set]]
  - [[lk_status_poll]]
  - [[lk_pull]]
  - [[lk_key]]


* Point
:PROPERTIES:
:CUSTOM_ID: Point
:END:

#+BEGIN_VERSE
[[../cargo-doc/linkspace/point/index.html][Rust docs]]
#+END_VERSE

Points are the basic units in linkspace.
They carry data, link to other points, and might contain information about the who, what, when, and how.
There are 3 kinds of points. datapoints, linkpoints, and keypoints.
A point has a maximum size of 2^{16}-512 bytes.

The functions automatically generate the hash and prepend a netheader when you build a point.
The result is a packet. For simplicity sake, all functions in the library deal only with packets.

** lk_datapoint
:PROPERTIES:
:CUSTOM_ID: lk_datapoint
:END:

#+begin_ctabs
#+begin_sh

#+BEGIN_SRC bash :session cli2 :exports both :results output verbatim
echo "Hello, Sol!" | lk data | lk pktf "[hash:str]\n[data]"
#+END_SRC

#+end_sh

#+begin_py

#+begin_src python :session lkpy :exports both :results value verbatim
from linkspace import *
datap = lk_datapoint(b"Hello, Sol!\n")
lk_eval2str("[hash:str] = [data]", datap)
#+END_SRC

#+end_py

#+end_ctabs

** lk_linkpoint
:PROPERTIES:
:CUSTOM_ID: lk_linkpoint
:END:

A linkpoint can: hold data, hold links to other points, and can be found with by its path.

It consists of these fields:

| Field_{size}      |                                                    |
|-------------------+----------------------------------------------------|
| Group_{32}        | the intended recipients.                           |
| Domain_{16}       | the intended application.                          |
| Path_{var<240}    | Sequence of bytes. e.g. '/dir1/dir2/thing'         |
| Stamp_{8}         | Big endian UNIX timestamp in microseconds.         |
| Links_{48*n}      | A variable length list of (Tag_{16}, Pointer_{32}) |
| -Link[0]_{48}     |                                                    |
| -Link[1]_{48}     |                                                    |
| -Link[2]_{48}     |                                                    |
| -Link[...]_{48}   |                                                    |
| Data_{var<2^{16}} |                                                    |

Each (Domain,Group) is a 'tree', and each (Domain,Group,Path) is a points 'location'.

All values, including the Path, contain arbitrary bytes.

An entire point can be 2^{16}-512 bytes in size. The header is always 4 bytes.
A data point can hold a maximum of 2^{16}-512-4 bytes.
This space is shared between the links and data so beware that too much data and links won't fit into a single packet
[fn::To overcome this, create multiple points and link them in a new linkpoint].

#+BEGIN_VERSE
Point hashes, GroupID's, and public keys are 32 bytes.
They are usually encoded in URL-safe no-padding base64, e.g. ~RD3ltOheG4CrBurUMntnhZ8PtZ6yAYF~.
Such a string makes things unreadable.
The ~[...]~ syntax ([[ABE]]) allows you to name and manipulate bytes.
This following example shows that ~[#:pub]~ resolves to the bytes ~RD3ltOheG4CrBurUMntnhZ8PtZ6yAYF~ in both the Group and the second link
Furthermore, If no group was provided it defaults to ~[#:pub]~
#+END_VERSE

Datapoints do not have a 'create' field, so they get the same hash given the same data.
If we had forced a specific 'create' stamp for both the python and bash example it would have produced the same hash for both.
By default 'create' is set to the current time ( microseconds since epoch ) and thus the hashes are different.

#+begin_ctabs
#+begin_sh

The command ~lk link~ builds one or more linkpoint packets and output's it to stdout by default.
Whenever a cli commands deal with (domain, group, path) tuples, they are set by the first argument: ~DOMAIN:GROUP:PATH~.
Here two links are added with the tags ~first_tag_1~ and ~another_tag~.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  lk link "a_domain:[#:pub]:/dir1/dir2/thing" -- \
            first_tag_1:Yrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk \
            another_tag:[#:pub] \
  | lk pktf
  
#+END_SRC

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  echo hello | lk link my_domain --data-stdin | lk pktf
#+END_SRC

#+END_sh


#+begin_py

The API deals with arbitrary bytes, not encoded strings.
Some example python code that returns a value of type 'bytes' are:

- ~"some string".encode()"~
- the ~b"byte notation"~
- fields like ~apkt.group~, ~apkt.hash~ ~apkt.domain~ etc
- evaluate an ABE string with [[lk_eval]].

#+begin_src python :session lkpy :exports both :results value verbatim 
  ptr1 = lk_eval("[b:Yrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk]")
  link1 = Link(tag=b"first tag 1",ptr=ptr1)

  ptr2 = lk_eval("[#:pub]")
  link2 = Link(b"another tag",ptr2)

  assert(link1.ptr == link2.ptr)

  datap = lk_datapoint(b"Hello example");
  link3 = Link(b"a datapoint",datap.hash)

  linkp = lk_linkpoint(
      domain=b"example-domain",
      group=lk_eval("[#:pub]"),
      data=b"Hello, World!",
      links=[link1,link2,link3]
  )
  str(linkp)
#+END_SRC
#+end_py


#+END_ctabs



** lk_keypoint 
:PROPERTIES:
:CUSTOM_ID: lk_keypoint
:END:

A key point is a linkpoint with an additional publickey and signature.

There are functions to generate, encrypt, and decrypt a linkspace key.
Leaving you to deal with the saving.
Alternatively there is the [[lk_key]] function that does it all for you.
With the added benefit that you can address your own public key as ~[@:me:local]~.

#+begin_ctabs
#+begin_sh
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  export LK_DIR=/tmp/linkspace
  lk --init key --decrypt-cost 0 --password "my secret" # remove the --decrypt-cost. it speeds up building this doc
#+END_SRC

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim 
lk keypoint "example::" --password "my secret" | lk pktf
#+END_SRC

#+BEGIN_VERSE
The CLI also accepts ~lk link --sign~ instead of ~lk keypoint~
#+END_VERSE


#+END_sh
#+begin_py
#+begin_src python :session lkpy :exports both :results value verbatim
  lk = lk_open("/tmp/linkspace",create=True)
  key = lk_key(lk,b"my secret");
  example_keypoint = lk_keypoint(key=key,domain=b"example")
  str(example_keypoint)
#+END_SRC

#+END_py
#+END_ctabs



** Fields

In python you can access these fields directly as bytes.
Fields are not writable because they are included in the hash.

#+begin_src python :session lkpy :exports both :results value verbatim
  [attr for attr in dir(lk_linkpoint())  if not "__" in attr]
#+END_SRC

Where path[0..7] are the path components, 

#+BEGIN_VERSE
Some [[#predicatelist][fields]] we've not seen so far are writable, but they are not relevant for most applications.
#+END_VERSE


** Notes

Groups signals the intended set of recipients.
Domains signal the activity, and practically the application used to present an interface to the user.

The groups bytes can be chosen arbitrarily. Membership is enforced by its members.
It's up to the user (or some management tool) to pick a method of data exchange.

The following do have a meaning.
The [0;32] null group ( ~[#:0]~ ), i.e. the local only group, is never transmitted to other devices and is never accepted from outside sources.
Everything in the ~[#:pub]~ group[fn:: the hash of ~lk_datapoint(b"Hello, Sol!\n")~] is meant for everybody. e.g. the public.

By convention the group created by pubkey1 XOR pubkey2 forms a group with those keys as its only two members.

#+BEGIN_VERSE
The ~[#:...]~ is part of the [[LNS]].
A public registry for assigning names and naming rights.
e.g. ~[#:sales:mycomp:com]~ for groups and ~[@:alicekey:mycomp:com]~ for keys.
#+END_VERSE


** lk_write and lk_read
:PROPERTIES:
:CUSTOM_ID: packet_layout
:END:

The point is the content that is hashed, the packet is the a mutable network header, the hash, and the point.

#+BEGIN_ctabs
#+begin_py

#+begin_src python :session lkpy :exports both :results output verbatim
  datap = lk_datapoint("hello")
  linkp = lk_linkpoint()
  keyp = lk_keypoint(key)
  packet_bytes = lk_write(datap) + lk_write(linkp) + lk_write(keyp)
  print(len(packet_bytes),packet_bytes)

  # read the bytes as packets
  (p1, packet_bytes)= lk_read(packet_bytes)
  (p2, packet_bytes)= lk_read(packet_bytes)
  (p3, packet_bytes)= lk_read(packet_bytes)

  assert(p1 == datap)
  assert(p2 == linkp)
  assert(p3 == keyp)
#+end_src

#+end_py
#+begin_bash


The CLI automatically reads and writes in packet format from the relevant pipes.
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
  echo datapoint:
  echo -n hello | lk data | tee /tmp/pkts | xxd 
  echo linkpoint:
  echo -n hello | lk link my_domain:[#:pub]:/hello/world -- link1:[#:0] link2:[#:test] | tee -a /tmp/pkts | xxd 
  echo keypoint:
  echo -n hello | lk keypoint --password "my secret" my_domain:[#:pub]:/hello/world -- link1:[#:0] link2:[#:test] | tee -a /tmp/pkts | xxd 
  cat /tmp/pkts | lk pktf [hash:str]
#+END_SRC
#+end_bash


#+end_ctabs

Unless you're writing an exchange process, a developer shouldn't have to deal with this level of IO.

* ABE
:PROPERTIES:
:CUSTOM_ID: ABE
:END:

#+BEGIN_VERSE
[[../cargo-doc/linkspace/abe/index.html][Rust docs]]
#+END_VERSE

ABE (Ascii-Byte-Expr) is a tiny byte templating language.
A stringly representation of delimited bytes ( of the type: ~[ ( [u8], delimiter ) ]~ ).
Its primary purpose is to make it easy for developers to read and write sequences of bytes (0..=255) in plain ascii, including the ~null~ (0) byte.
In addition, it supports evaluation of functions that act as shorthand for long sequences of bytes. 

Linkspace has no concept of encoding.
Fields have a fixed length or prefix their exact length.

ABE is used for things like [[Query]], [[DEFAULT_FMT][printing]], and in most arguments for the cli.

ABE is not meant to be a proramming language!
It's primarily meant to read and write arbitrary bytes in some context and quickly beat them into a desired shape.
Some things are limited by design.
If there is no obvious way to do something use a general purpose language to deal with your use-case.

When building an application you can choose where to use ABE and when to use a different encoding.

** Basic Encoding

- Most printable ascii letters are as is.
- Newline is an external delimiters.
- ~:~ and ~/~ are internal delimiters. Separating two byte expressions.
- ~[~ and ~]~ wrap an expression
- ~:~, ~/~, ~\~, ~[~, ~]~  can be escaped with a ~\~.
- ~\x00~ up-to ~\xFF~ for bytes.
- ~\0~ equals  ~\x00~,  ~\f~ equals ~\xFF~

We can encode binary into valid abtxt as follows:

#+BEGIN_VERSE
We'll get back to [[#lk_encode][encode]] more in depth later. 
#+END_VERSE

#+BEGIN_ctabs
#+begin_bash
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
printf "hello" | lk encode -i
printf "world/" | lk encode -i
printf "nl \n" | lk encode -i
printf "open [ close ]" | lk encode -i
printf "emoji ⌨" | lk encode -i
#+END_SRC
#+end_bash

#+begin_py
All fields are arbitrary bytes, and lk_encode can print them as ab text

#+begin_src python :session lkpy :exports both :results output verbatim
  multiline = """newline
  tab	""".encode() # encode implies utf-8

  lkp = lk_linkpoint(path=[b"hello",b"world/",multiline,b"open [ close ]"])

  print(lk_encode(lkp.path0),"\t",list(lkp.path0))
  print(lk_encode(lkp.path1),"\t",list(lkp.path1))
  print(lk_encode(lkp.path2),"\t",list(lkp.path2))
  print(lk_encode(lkp.path3),"\t",list(lkp.path3))
  print(lk_encode(lkp.path4),"\t",list(lkp.path4), lkp.path4.decode("utf-8"))
#+end_src

#+end_py
#+end_ctabs

** lk_eval

ABE is evaluated by substituting an expressions ( ~[..]~ ) with its result.
For example in ~[u8:97]~, the function 'u8' is called with the arguments ["97"].
The function 'u8' reads the decimal string and writes it as a byte.
The byte 97 equals the character 'a'. The byte 99 equals the byte 'c'

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim 
lk eval "ab[u8:99]" | xxd
#+END_SRC

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
lk eval --json "h[u8:101]ll[u8:111] / world:etc" 
#+END_SRC

Note that bytes are joined after evaluating. In the example this results in ~h~ + ~e~ + ~ll~ + ~o~ + ~' '~ => ~'hello '~.
The meaning of the delimiters ('\n', ':', '/') are interpreted depending on the context.
For instance, ~lk eval~ prints them 'as is' for the outer expression.


#+Begin_VERSE
The rest of this chapter explains ABE further in depth.

The ABE functions can shorten your code, and almost every CLI argument is an ABE expression.
These expressions can directly refer to the context, such as a [[#pkt-scope][packet]].
This makes ABE a powerful tool.

But knowing all of ABE's features it not required to use linkspace.

ABE a language of convenience.

With basic knowledge of its purpose to read and write separated bytes (i.e. ~[ [u8] ]~), expression substitution (~[..]~), and the ~':'~, ~'/'~ delimiters,
the rest of the guide (starting at [[Query]]) can be read while you return here for reference in case something is unclear.
#+end_VERSE


There are two modes for tokenizing (before evaluation).
- Strict: ~\n~, ~\t~, ~\r~ and bytes outside the range 0x20(SPACE)..=0x7e(~) are escaped.
- Parse Unencoded: bytes outside 0x20..=0x7e are read 'as-is'.

Both error when bytes are incorrectly escaped or non-closed ~[~, ~]~ brackets exists.

*** Sub-expressions

A list of functions/macros be found by evaluating
[[Help][[[help]]][\[help\]]].

**** Functions

- ~[fn]~
- ~[fn:arg0]~
- ~[fn:arg0:arg1]~

The arguments are plain bytes. A function can take upto 8 arguments.
Usually the results is concatenated with its surrounding bytes.
The empty function ~'[:...]'~ resolves to its first argument.

- ~hello [:world]~ == ~hello world~

Arguments are evaluated before application.
~[fn0:[fn1]]~ will call fn1 and use its result as the first argument to fn0.

You can chain results with ~/~.
It uses the result as the first argument to the next function.

- ~[:97/u8]~ == ~[u8:97]~ == ~a~
- ~[:97/u8/?u]~ == ~[?u:[u8:97]]~ == ~97~
  
You can think of ABE functions as a translation of conventional function calling.

| ~[name:arg1:arg2]~              | ~name(arg1,arg2)~                  |
| ~[name:[other_name:argA]:arg2]~ | ~name( other_name(argA) , arg2 )~  |
| ~[other_name:argA/name:arg2]~   | ~name ( other_name(argA) , arg2 )~ |

#+BEGIN_VERSE
Functions are aware if they are first or not.
The vast majority of functions do not care.
#+END_VERSE

#+BEGIN_VERSE
~[[:u8]:97]~ is explicitly not allowed. Variable function identifiers are conceptually interesting but practically begging for bugs.
#+END_VERSE

Note: describing ABE can be a bit tricky in relation to conventional languages.
Specifically, there is no syntax to "reference" a function, they are always resolved to their result.
i.e. ~fn name(){..}; let x = name; let y = name();~ has the ~()~ syntax to differentiate between calling a function or referencing a value.
There are no 'variables' by design, because ABE is not meant to be used that way.


**** Macros
The second type of operation is applying a macro.
Whereas functions are called after their arguments are evaluated.
Macros are called _as is_ up until its matching ']' without evaluation ~[..]~ expressions.

- ~[/a_macro]~
- ~[/a_macro:arg0:arg1]~
- ~[/a_macro:[fn:arg0]:arg1/hello]~

The ~/a_macro~ macro operates on ~:[fn:arg0]:arg1/hello~ without it being evaluated.


*** Scope & Context
:PROPERTIES:
:CUSTOM_ID: scope
:END:

Functions and Macros are defined in a scope.
Scopes can be chained, so that if no matching function is found it looks in the next scope. 
The standard scope chain has multiple functions and macros to manipulate bytes.
You can see all active scopes with the [help] function.

Sometimes the scope chain is extended with additional context: 

**** Argv

A scope containing functions resolving to an argument vector. 

#+BEGIN_ctabs
#+begin_py

#+begin_src python :session lkpy :exports both :results value verbatim
  inp = "Rm9ycmVzdA" # the base 64 encoding of the word "Forrest"
  lk_eval("[0] [1/b], [0]!",argv=["Run",inp])
#+end_src

#+end_py
#+end_ctabs

**** Packet
:PROPERTIES:
:CUSTOM_ID: pkt-scope
:END:


By providing a packet, the packet scope is added to the chain.
This adds functions such as ~hash~, ~group~, ~path~ etc.
These are bytes that you can use as arguments.

e.g ~[hash/?b]~ encodes the hash in base 64.

For convenience all packet fields accept 'str' and 'abe' as a first argument to print them in a default format.
| ~[hash:str]~      | ~[hash/?b]~      |
| ~[group:str]~     | ~[group/?b]~     |
| ~[create:str]~    | ~[create/?u]~    |
| ~[links_len:str]~ | ~[links_len/?u]~ |
| ...               |                  |

The ~[/links:...]~ macro iterates over every link in a packet.
It evaluates the inner scope for each link with setting the ~tag~ and ~ptr~ function.

#+BEGIN_ctabs
#+begin_sh
~pktf~ is ~eval~ that reads packets from stdin and puts them in scope.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
  lk link "::" -- tag1:[#:0] tag2:[#:pub] | \
      lk pktf "HASH:[hash/?b]\n[/links:TAG = [tag:str] PTR = [ptr:str] \n]"
#+END_SRC

#+end_sh

#+begin_py
#+begin_src python :session lkpy :exports both :results value verbatim
  lp = lk_linkpoint(links=[Link("hello",PUBLIC),Link("world",PRIVATE)])
  lk_eval2str("hash:[hash:str]\\n[/links:[tag:str] [ptr:str]\\n]",pkt=lp)
#+END_SRC


#+end_py
#+end_ctabs

**** Linkspace

Having a linkspace instance in the scope gives you access to functions like:

- ~#~ and ~@~ ( see [[LNS]] ) for named groups, keys, and other data
- ~readhash~

When using [[lk_open]] , the instance is automatically setup as scope.

~readhash~ is considered bad practice, fine to hack something together, but it doesn't give you much room to process errors or async.
But you can do some wizardry combining it with ~[/links]~.

*** Usage notes

ABE expressions evaluate into a list of [ (?sep,bytes) ].
Sometimes each element has a different meaning, e.g. [ ( 0, domain ) , ( :,  group) ] in the CLI arguments.
You can process this list with ~lk_tokenize_abe~. 

But in the majority of cases we don't care about the list and only want a single result.
~lk_eval~ does just that. It interprets the separators as plain characters.

Finally, consider what you would expect to happen when an macro takes a ABE expression as its final argument:

- ~[/links:abc[:hello]/world]~
- ~[/readhash:[#:pub]:the pkt:[pkt]]~
- ~[/:hello/world]~
- ~lk link :: --write 'file:./afolder:with/colons'~

The choice was made that if the final argument is an abe expression that will be evaluated, it doesn't need wrapping ~[]~.
Instead, it interprets the entire tail as is.
This reduces the need to escape ':' and '/', but complicating some other expressions.

#+BEGIN_VERSE
We can add an expression to --write arguments
~lk link :: --write "stdout-expr:hello world:/ [hash:str]"~
In case of ~file~ this leaves us in the situation that second argument is the file and the tail of the expression will be evaluated
One option is to use ~[/:..]~ to read ':' and '/' as is.
~lk link :: --write "file-expr:[/:./afolder:with/colons]:hello world:/ [hash:str]"~
#+END_VERSE


*** Help
:PROPERTIES:
:CUSTOM_ID: abe-help
:END:

A full list of active scopes can be viewed with the ~help~ function.
#+BEGIN_ctabs
#+begin_misc
#+BEGIN_VERSE
The following naming conventions are used:

- ending with '?' is a predicate to check a property.
- starting with '?' is a basic reverse operation. [u8:97/?u] == 97. Its similar but less powerful then [[lk_encode]] and lacking '[]' brackets.
- b_RADIX_ ( b2, b8, b16 ) 'b' defaults to base64 radix
- u_SIZE_  ( u8, .., u128 ) parse decimal into big endian bytes. ?u interpret as big endian print to decimal
#+END_VERSE
#+end_misc

#+begin_py
#+name:abe-help-py
#+custom_id:abe-help-pyid
#+begin_src python :session lkpy :exports both :results value verbatim
lk_eval2str("[help]",pkt=lk_linkpoint(),argv=["hello"]) # the help won't show up if no scope is set. 
#+END_SRC
#+end_py
#+end_ctabs

** lk_encode
:PROPERTIES:
:CUSTOM_ID: lk_encode
:END:

Translate bytes into abe such that ~lk_eval(lk_encode(X)) == X~

#+begin_verse
We can get meta. lk_encode is available as the macro ~[/?:bytes:options]~
#+end_verse

#+begin_ctabs
#+begin_py

#+begin_src python :session lkpy :exports both :results output verbatim
  data = bytes([0,0,0,255])
  abe = lk_encode(data)
  assert data == lk_eval(abe)
  print("ab  text:", abe)
  abe = lk_encode(data,"u8/u32/b") # Try to encode as expression
  print("abe text:", abe)
#+END_SRC

#+end_py
#+end_ctabs

*** DEFAULT_FMT
This is how packets are printed by default using ~lk pktf~ or pythons ~str(pkt)~.

#+begin_ctabs
#+begin_py
#+begin_src python :session lkpy :exports both :results output verbatim
  import linkspace
  print(linkspace.DEFAULT_PKT)
#+END_SRC
#+end_py
#+end_ctabs


** lk_tokenize_abe
:PROPERTIES:
:CUSTOM_ID: lk_tokenize_abe
:END:



** LNS
:PROPERTIES:
:CUSTOM_ID: ABELNS
:END:

LNS is a system for publicly naming keys and groups, and adding auxiliary data to them.
It allows you to register as ~@:Alice:nl~, ~#:sales:company:com~, etc.

LNS is easy to use from an abe expression.
Both to lookup and do a reverse lookup.

See [[../../lns.html][lns]] for info.

#+BEGIN_VERSE
You can create local bindings, allowing you to reference ~[@:my_identity:local]~ or ~[#:friends:local]~
By default [[lk_key]] sets up the ~[@:me:local]~ identity.
#+END_VERSE

#+begin_ctabs
#+begin_sh
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
  lk eval "[#:pub]" | lk encode "@/#/b"
#+END_SRC

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
  lk eval "[@:me:local]" | lk encode "@/#/b"
#+END_SRC

#+end_sh

#+begin_py
#+begin_src python :session lkpy :exports both :results output verbatim
  group = example_keypoint.group
  print("The bare bytes:", group)
  
  # encode as b64
  b64 = lk_encode(group,"b")
  print("b64 encoded   :", b64)

  # Try to express as a [#:..], on failure try as [@:..], fallback to [b:...]
  try_name = lk_encode(group,"#/@/b")
  print("Or through lns:", try_name)

  print("Pkt's pubkey  :",example_keypoint.pubkey)
  try_keyname = lk_encode(example_keypoint.pubkey,"#/@/b")
  print("Similarly lns :", try_keyname)


#+END_SRC

#+end_py
#+end_ctabs


* Query
:PROPERTIES:
:CUSTOM_ID: Query
:END:


#+BEGIN_VERSE
[[../cargo-doc/linkspace/query/index.html][Rust docs]]
#+END_VERSE

A query is a list of predicates and options used to define a set of packets.
They're used in various ways, most notably you can use them to read ([[lk_get]], [[lk_get_all]]), await ([[lk_watch]]) and request ([[lk_pull]]) packets.

** lk_query
:PROPERTIES:
:CUSTOM_ID: lk_query
:END:

Queries are newline separated.
Predicates are an [[ABE]] 3-tuple ~field ':' test-operation ':' value~ and constrain the set of accepted packets.
Options are context dependent and start with ':'

A query might look like this:

#+BEGIN_EXAMPLE
group:=:[#:pub]
domain:=:example
path:=:/hello/world
pubkey:=:[@:me:local]
create:>:[now:-1D]
#+END_EXAMPLE

A predicate can be set multiple times. In the example above we could add ~create:<:[now:+2D]~ to constrain it further.
Queries are designed such that you can concatenate their strings and get their union.
If the result is the empty set an error is returned.

There are 4 basic test operations and a couple of aliases.

| Basic Op |                                   |
|----------+-----------------------------------|
| >        | greater eq                        |
| <        | less eq                           |
| 0        | all '0' in value are '0' in field |
| 1        | all '1' in value are '1' in field |

The following are shorthand and resolve to one or more of the basic tests.

| Derived Ops |                          |
|-------------+--------------------------|
| =           | >(val-1) and <(val+1)    |
| >=          | >(val-1)                 |
| <=          | <(val+1)                 |
| *=          | Last n-bytes must eq val |
| =*          | First n-bytes must eq val |



#+begin_ctabs
#+begin_sh

The CLI has options that can act as a guide in creating queries by using ~lk print-query --help~.

#+BEGIN_VERSE 
Many cli commands (e.g. ~print-statemnt~, ~watch~ ) take as the first argument a ~domain:group:path:(?depth)~
If no depth is set the path_len is constraint by default.
Except for ~watch-tree~ which sets the depth to unconstrained by default
#+END_VERSE 

Here we look for the domain 'my' , the group [#:pub], with path starting at /hello and with one additional path component.

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim :cache no
lk print-query "my:[#:pub]:/hello:*" --signed
#+END_SRC

#+end_sh

#+begin_py
#+begin_src python :session lkpy :exports both :results value verbatim
  template = lk_query_parse(lk_query(),"group:=:[#:pub]")
  a_copy = lk_query(template)
  lk_query_print(a_copy)
#+end_src

#+end_py
#+end_ctabs

** lk_query_parse
:PROPERTIES:
:CUSTOM_ID: lk_query_parse
:END:

Add multiple constraints to a query.
You can add multi line strings or per line.
Each line is evaluated as an abe expression.
You can set a pkt or argv context.

Returns an error if the resulting set is empty.
The full list of predicates and their byte size can be found [[#predicatelist][here]].

#+begin_ctabs
#+begin_py
#+begin_src python :session lkpy :exports both :results value verbatim
  q = lk_query()

  stmt = """
  group:=:[#:pub]
  domain:=:example
  """

  q = lk_query_parse(q,stmt,
                 "path_len:<:[u8:4]",
                 "data_size:<:[0]",argv=[int(10).to_bytes(2)]) 
  lk_query_print(q,True)
#+END_SRC


#+end_py
#+end_ctabs

** lk_query_push
:PROPERTIES:
:CUSTOM_ID: lk_query_push
:END:

Similar to lk_query_parse, but only adds a single statement and the last field expects the bytes.

#+begin_ctabs
#+begin_py

#+begin_src python :session lkpy :exports both :results value verbatim
  q = lk_query()
  q = lk_query_push(q,"data_size","<",bytes([0,4])) # less than 4
  q = lk_query_push(q,"data_size","<",lk_eval("[u16:20]"))  # less than 20
  q = lk_query_push(q,"data_size","<",int(3).to_bytes(2))  # less than 3
  lk_query_print(q)
#+END_SRC

 Adding a contradictions returns an error.

#+begin_src python :session lkpy :exports both :results value verbatim
  try:
    r = lk_query_push(q,"data_size",">",bytes([0,100])) # greater than 100 and smaller than 3 can not both be true
  except Exception as e :
    r = ("That's not possible",e)
  r

#+END_SRC

#+end_py
#+end_ctabs


** lk_query_print
:PROPERTIES:
:CUSTOM_ID: lk_query_print
:END:

Print a query as text.
The query will have merged overlapping predicates
The boolean argument sets whether to create abe expressions or stick to a representation without expressions.

#+begin_ctabs
#+begin_py

#+begin_src python :session lkpy :exports both :results value verbatim
  lk_query_print(q,True)
#+END_SRC

#+end_py
#+end_ctabs


#+BEGIN_VERSE
The ~b2~ function read a binary representation.
The types are: datapoint=[b2:0000_0001], linkpoint [b2:0000_0011], keypoint [b2:0000_0111].
Setting 'group', 'domain', 'path', 'links', or 'create' predicates automatically exclude the datapoint type.
Setting pubkey or signature excludes link and data points.
#+END_VERSE

** More on predicates

#+Begin_VERSE
~group~ requires 32 bytes but will try to parse base64.
~domain~ requires 16 bytes but will prepend '\0' if too few bytes are given
~path~ and ~prefix~ only take the = op. Their value is the spath bytes ~path:=:[//hello/world]~, but they'll accept ~/hello/world~ as well
#+end_VERSE

Besides the fields in a point, predicates also apply to the hash and variable net header fields.

The netheader fields can be mutated, and are stored in the database when a packet is first written.
Domain applications should avoid these fields. They are used when writing an exchange process.
(For more notes on that see dev/exchange.md)

The netheader is 32 bytes which are named: 

|              |                               |
| Field_{size} |                               |
|--------------+-------------------------------|
| Prefix_{3}   | magic bytes 'LK1'             |
| NetFlags_{1} | See source code               |
| hop_{2}      | number of hops since creation |
| stamp_{8}    |                               |
| ubits0_{4}   |                               |
| ubits1_{4}   |                               |
| ubits2_{4}   |                               |
| ubits3_{4}   | RESERVED                      |

Except for the prefix and ubits3.

*** Recv

The final predicate is 'recv'. This is a 8 byte stamp for when the packets was first read.
It can be used to filter such as ~recv:>:[now:-1D]~.

It is considered bad design for applications to depend on this.
They should use the ~create~ stamp to avoid depending on any group-exchange specific behavior.

The recv predicate depends on the context. 
Reading from the database the recv is set to the time the packet was received:  ~lk watch-log --bare -- "recv:>:[now:-1D]"~
But when reading from a pipe it is set to when the pipe reads the packet: ~lk watch-log | lk filter "recv:>:[now:-1D]"~

In both cases the predicate ~recv:<:[now:+1m]~ would stop the process after 1 minute.

** Options

Options are additional configurations for a set of predicates.

They are of the form ~':' name ':' rest~. 
Depending on the context/function they are ignored.
Developers are free to expand their meaning for their usecase like in a group exchange processes. 

Unlike predicates, options have no standard meaning when two queries with the same option are concatenated.
Predicates have a well defined meaning when queries are concatenated.
Options should define their own logic when they appear multiple times.

The following options are known to have a specific meaning:

NOTE: These options will change somewhat in coming versions. 

| name          | value                      | use                                            | multiple     |
|---------------+----------------------------+------------------------------------------------+--------------|
| :mode:        | (tree/hash/log)-(asc/desc) | set the table to read from                     | Last is used |
| :follow       |                            | also output linked packets                     | N/A          |
| :qid:         | <any>                      | identity/close an active query                 | Last is used |
| :notify-close |                            | send a final dummy packet when closing a query | N/A          |

** Known predicates & options
:PROPERTIES:
:CUSTOM_ID: predicatelist
:END:

The full list of options and predicates:

#+begin_ctabs
#+begin_rs

Current set of [[../cargo-doc/linkspace/query/enum.PredicateType.html][predicates]] and 
[[../cargo-doc/linkspace/query/enum.KnownOptions.html][options]].

Predicates must be known, unknown options are added but ignored.
An exchange process will for instance add a ':boomfilter' only it understands.
#+end_rs

#+begin_sh
#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim 
 lk print-query --help
#+end_src

#+RESULTS:
#+begin_example
hash         - the point hash e.g. \[b:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\]
group        - group id e.g. \[#:pub\]
domain       - domain - if fewer than 16 bytes, prepadded with   e.g. \[a:example\]
prefix       - path prefix - only accepts '=' op e.g. /hello/world
path         - exact path - only accepts '=' op e.g. /hello/world
pubkey       - public key used to sign point e.g. \[@:me:local\]
create       - the create stamp e.g. \[now:-1H\]
path_len     - the total number of path components - max 8 e.g. \[u8:0\]
links_len    - the number of links in a packet e.g. \[u16:0\]
data_size    - the byte size of the data field e.g. \[u16:0\]
recv         - the recv time of a packet e.g. \[now:+1D\]
i_branch     - total packets per uniq (group,domain,path,key) - only applicable during local tree index, ignored otherwise e.g. \[u32:0\]
i_db         - total packets read from local instance e.g. \[u32:0\]
i_new        - total newly received packets e.g. \[u32:0\]
i            - total matched packets e.g. \[u32:0\]
hop          - (mutable) number of hops e.g. \[u16:5\]
stamp        - (mutable) variable stamp e.g. \[now\]
ubits0       - (mutable) user defined bits e.g. \[u32:0\]
ubits1       - (mutable) user defined bits e.g. \[u32:0\]
ubits2       - (mutable) user defined bits e.g. \[u32:0\]
ubits3       - (mutable) user defined bits e.g. \[u32:0\]
type         - the field type bits - implied by other predicates e.g. \[b2:00000001\]
netflags     - (mutable) netflags e.g. \[b2:00000000\]
point_size   - exact point size - (netpkt_size - 32b header - 32b hash) e.g. \[u16:4\]

The following options are available

	:mode
	:qid
	:follow
	:notify-close


query - print full query from common aliases

Usage: lk print-query [OPTIONS] [DGPD] [-- <EXPRS>...]

Arguments:
  [DGPD]      
  [EXPRS]...  

Options:
  -p, --print-expr               print the query
      --print-text               print in ascii-byte-text format (ABE without '{..}' expressions)
      --mode <MODE>              [default: tree-desc]
      --private                  enable io of linkpoints in [#:0] [env: LK_PRIVATE=]
  -b, --bare                     
      --index                    only match locally indexed pkts           | i_new:=:{u32:0}
      --new                      only match new unindexed pkts             | i_db:=:{u32:0}
      --max <MAX>                match upto max packets.                   | i:<:{u32:max}
      --max-branch <MAX_BRANCH>  match upto max per (dm,grp,path,key) pkts | i:<:{u32:max_branch}
      --max-index <MAX_INDEX>    match upto max from local index           | i_db:<:{u32:max_index}
      --max-new <MAX_NEW>        match upto max unindexed pkts             | i_new:<:{u32:max_new}
      --signed                   match only signed pkts                    | pubkey:>:{@:none}
      --unsigned                 match only unsigned pkts                  | pubkey:=:{@:none}
      --watch                    Add :qid option (generates qid)
      --qid <QID>                set :qid option (implies --watch)
      --follow                   Add :follow option
      --ttl <TTL>                add recv:<:{now:+..}
  -h, --help                     Print help
#+end_example

#+end_sh
#+end_ctabs

** lk_hash_query
:PROPERTIES:
:CUSTOM_ID: lk_hash_query
:END:

[This function might be removed]

A shorthand for getting a packet by hash.
Can be used with [[lk_watch]].
If you expect the value to be known locally [[lk_get_hash]] is faster.



* Linkspace
:PROPERTIES:
:CUSTOM_ID: linkspace
:END:
#+BEGIN_VERSE
[[../cargo-doc/linkspace/linkspace/index.html][Rust docs]]
#+END_VERSE

You can open/create a instance with [[lk_open]].
If given no directory it opens $LK_DIR or $HOME/linkspace.

An instance is a handle to a multi-reader, single-writer database. 
The instance is thread local, for each new thread or process you want to use it in
use [[lk_open]]

An application can save to the database ([[lk_save]]).
To read from the database you can directly get a packet by hash ([[lk_get_hash]]) or using a query ([[lk_get]], [[lk_get_all]]).

A thread can register a watch ([[lk_watch]]).
A watch is a query & function that is called for each new packet matching the query.
By default the function is immediatly called for each match in the database.

Whenever any thread saves a new packet all other threads receive a signal.

By default nothing happens.
A thread does not see the new packets untill its read transaction is updated.
#+BEING_VERSE
This includes all ~lk_get*~ and ~lk_watch~.  
#+END_VERSE

To do so you tell the instance to process all the new packets ([[lk_process]],[[lk_process_while]]).
This runs all functions registered as a watch. 
Only after that is the thread's view of the database updated to the latest state.

The [[../cargo-doc/linkspace/linkspace/index.html][Rust docs]] are currently the most up to date, but the python package has most functions typed and commented as well.

** lk_open
:PROPERTIES:
:CUSTOM_ID: lk_open
:END:


** lk_save
:PROPERTIES:
:CUSTOM_ID: lk_save
:END:


** lk_get
:PROPERTIES:
:CUSTOM_ID: lk_get
:END:

** lk_get_all
:PROPERTIES:
:CUSTOM_ID: lk_get_all
:END:

** lk_get_hash
:PROPERTIES:
:CUSTOM_ID: lk_get
:END:



** lk_watch
:PROPERTIES:
:CUSTOM_ID: lk_watch
:END:


** lk_process
:PROPERTIES:
:CUSTOM_ID: lk_process
:END:

** lk_process_while
:PROPERTIES:
:CUSTOM_ID: lk_process_while
:END:


** lk_close_watch
:PROPERTIES:
:CUSTOM_ID: lk_close_watch
:END:


* Conventions
:PROPERTIES:
:CUSTOM_ID: Conventions
:END:
#+BEGIN_VERSE
[[../cargo-doc/linkspace/conventions/index.html][Rust docs]]
#+END_VERSE

Conventions are functions built on top of the other linkspace functions.
They provide a standard way for unrelated processes to loosly couple/interface with each other by encoding data into linkspace packets.

Generally they require the caller to also run [[lk_process]] or [[lk_process_while]]

One general conventions is that domains and paths starting with \xff are for meta things such as status queries and packet exchange.

** lk_status_set
:PROPERTIES:
:CUSTOM_ID: lk_status_set
:END:
Status queries allow us to communicate if a process exists that is handling a specific type and a specific instance.

The function signature is (~domain~, ~group~, ~obj_type~, ~instance~).

- A request is a packet in the form DOMAIN:[#:0]:/\fstatus/GROUP/type(/instance?) and has no data and no links.
- A reply is of the form DOMAIN:[#:0]/\status/GROUP/type/instance with some data and at least one link.

Note that the packets are in `#:0`.
This function is only for local status updates.

The group argument does not ask inside GROUP, it only signals which group the query is about.
Other processes are meant to answer a request.

The following are statuses that the exchange process should set:

- exchange GROUP process
- exchange GROUP connection PUBKEY
- exchange GROUP pull PULL PULL_HASH

** lk_status_poll
:PROPERTIES:
:CUSTOM_ID: lk_status_poll
:END:

Request the status of a `domain group obj_type ?instance timeout`.


** lk_pull
:PROPERTIES:
:CUSTOM_ID: lk_pull
:END:
A pull request is made by a domain application and signals the set of packets it wants.
The function takes the query and saves it as: 
~[f:exchange]:[#:0]:/pull/[query.group]/[query.domain]/[query.qid]~

#+BEGIN_VERSE
Note that from a domain's perspective, there is no such thing as 'fully synchronized'.
It is entirely up to the developer to structure their points such that it provides the right level of sync.
For example, a 'log' packets that link to known packets from a single device's perspective.
#+END_VERSE

Pull queries must have the predicates ~domain:=:..~ and ~group:=:..~, and ~:qid~.

An exchange process (such as in the [[../tutorial/index.html][tutorial]]) watches these packets and attempts to gather them.
The exchange is only responsible for pull requests received when it is running.
The exchange drops requests when you reuse the 'qid'.
The function returns the hash of the request.

A domain application should be conservative with its query.
Requesting too much can add overhead.

** lk_key
:PROPERTIES:
:CUSTOM_ID: lk_key
:END:

Read ( or creates ) an encrypted private key using the local LNS. It can then be referenced with ~[@:NAME:local]~.

* LNS
:PROPERTIES:
:CUSTOM_ID: lns
:END:

See [[../../lns.html][LNS]] for some general information.
See [[#ABELNS][abe#lns]] for how to use LNS for lookup and reverse lookup.

The LNS system works by making a claim in ~lns:[#:pub]:/claim/test/example/john~ which we'll call ~$Claim1~
A claim can have 3 types of special links.
The first link with the tag pubkey@ has as ptr the ~pubkey~ bytes to use when referring to ~@:john:example:test~.
The first link with the tag group# has as ptr the ~group~ bytes to use when referring to ~#:john:example:test~.
Every tag ending with '~^~' e.g. ~root_00^~ is an authority public key.
An authority has the right to vote for its direct subclaims. For example the claim ~lns:[#:pub]:/claim/test/example/john/home/~

~$Claim1~ becomes 'live' when a single authority of ~claim/test/example~ creates a vote by creating a keypoint ~lns:[#:pub]:/claim/test/example/john~ with
the link ~vote:$Claim1.hash~. The first claim to get a majority of votes wins.

* Advanced topics

** Big data
:PROPERTIES:
:CUSTOM_ID: bigdata
:END:

One way of reading/writing data larger than aprx 2^{16} is to create a linkpoint with multiple ~("data",datap_hash)~.
That would give you space for ~85mb~. You can go infinitely large by adding ~("continue",next_linkpoint)~.

#+begin_ctabs
#+begin_sh

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  python -c 'print("-" * 200000000,end="")' \
      | lk data \
      | lk collect example:: --create [epoch] --collect-tag 'data' --chain-tag 'continue'\
      | lk save -f \
      | lk filter example:: \
      | lk pktf "[hash:str] [links_len:str]"
#+END_SRC

#+BEGIN_VERSE
Advanced tip: we could have made this shorter with ~collect --forward db --write db --write stdout-expr "[hash:str] [links_len]"~
#+END_VERSE

#+END_sh
#+END_ctabs

Note that to recreate the data you have to do a 'depth first' search starting from the last result

#+begin_ctabs
#+begin_sh

#+BEGIN_SRC bash :session cli0 :exports both :results output verbatim
  lk watch-hash 1FAKPrMTY8nBQ4zeoXVvgn_ESQJcjJQ8l9fJDSmDEgA | lk get-links -R pause | lk pktf -d '' [data] > /tmp/bytes
  python -c 'print("-"*200000000,end="")' > /tmp/bytes2
  diff /tmp/bytes /tmp/bytes2 && echo ok
#+END_SRC


#+BEGIN_VERSE
Note the pktf -d '' to remove the delimiter between packets.
An alternative approach would be to use ~lk get-links --write file-expr:[/:/tmp/bytes]:[data] --forward null~
#+END_VERSE

#+END_sh
#+END_ctabs



* Q&A
:PROPERTIES:
:CUSTOM_ID: qa
:END:


**** Why Big Endian?
The tree index is in the expected order when using the numbers as path components.
E.g. ~lk linkpoint ::/some/dir/[now]~ will come after ~lk linkpoint ::/some/dir/[now:-1D]~ because ~now > (now - one day)~

**** Every user of my domain app needs X from my server/I want to add advertisements to my domain app.
Hardcode a public key into the app and combine it with a group exchange service.
Either use an existing group, or use the group: their-key XOR your-key for personalized stuff

**** I'm not in control of the user! / Anybody in my group can leak data from it!?
I don't make the rules, I just make them obvious.

**** A domain application can write outside its own domain space.
Yes, the current API has no restriction.
Maybe at some point we can effectively restrict processes through wasm or some other access control.

**** Why don't queries support negative predicates?

In most cases the meaning would be non obvious and/or slow to implement, and it would remove their "string concat == union" property.

Furthermore, when you want to exclude something it is much clearer to always have to define two phases.
i.e. All packets in group X, excluding those with property Y.

**** Why not use an SQL backend? / Why invent queries?
First off, if you desire to run SQL queries it is not too difficult to stream packets into a SQL table with `lk pktf` or some custom code, and query them.

Why its not the primary backend/query method has multiple reason. 

SQL isn't magic, and its non-trivial price to pay for something that is not a great fit for a few fundamental problems including:
 
1) What are the tables peers should have?
2) How to constrain a query you receive/as it travels to multiple peers? 
3) how to encode bytes?
   
All could be solved in a number of ways, but most solutions are quickly going to bloat and usually create multiple incompatible sublanguages
depending on the context.

linkspace queries support arbitrary bytes, can be constraint/tested through concatenation, and have a consistent meaning w.r.t. predicates and can easily be expanded with options.
