#+TITLE: Quick start
#+PANDOC_OPTIONS: template:./template.pml 
#+OPTIONS: toc:nil

This introduction uses the `lk` cli with bash.
You can follow along by [[https://github.com/AntonSol919/linkspace/releases][downloading]] the latest release. 
If you're more comfortable with Python or want a more detailed explanation check out the guide.  

#+NAME: init
#+BEGIN_SRC bash :session codeorg :exports none
  cd /tmp/
  export LK_DIR=/tmp/linkspace
  rm -r linkspace
#+END_SRC

#+NAME: version
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk --version
#+END_SRC

*** Point

A single unit|event|message in linkspace is called a `point`.
A point can hold just shy of 64kb.

#+NAME: point-hello
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  echo "Hello, Sol!" | lk point > mylog
#+END_SRC

Points have a few of optional properties besides the data field.

a spacename:
#+NAME: point-spacename
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  echo -n some data | lk point ::/my/example/spacename --data-stdin >> mylog
#+END_SRC

a timestamp in microseconds since epoch using `now` by default:

#+NAME: point-create
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  STAMP=$(($(date +%s%N)/1000000)) # There's an easier syntax we'll get back to.
  lk point ::/my/example/other_space --create-int $STAMP >> mylog
#+END_SRC

and a signature:

#+NAME: point-signed
#+BEGIN_SRC bash :exports code
  # We don't have a linkspace instance yet - we can still sign packets by creating/providing an Argon2 encrypted key
  KEY=$(lk key --no-pubkey --no-lk --password 'my secret') 
  lk point ::/my/example/spacename/subspace --sign --enckey "$KEY" --password 'my secret' >> mylog
#+END_SRC
#+NAME: real-signed
#+BEGIN_SRC bash :session codeorg :exports none :results output verbatim
  KEY='$argon2d$v=19$m=8,t=1,p=1$tb0anwpH0rSbYe6JLd1Bgtf00QQUAYuhOcBqeSjAgW4$kYAtGyF78cfPjRqcm4Y/s1hgQTRysELK/L910P2u27c'
  lk point ::/my/example/spacename/subspace --sign --enckey "$KEY" --password '' >> mylog
#+END_SRC

All points are hashed using Blake3. 

*Point's refer to the hashed fields/data. The point, hash, and a header are packed into the packet format. Functions/APIs deal exclusively in the packet format.*

`pktf` formats a stream of packets.

#+NAME: pktf
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  cat mylog | lk pktf "Hash: [hash:str] is a point at '[spacename:str]' with data '[data]'"
#+END_SRC

Because these properties are adjacent to 'data', they can be used for indexing and processing by
general purpose tools like `lk filter`. 

Here we take only the points with a spacename starting with `/my/example` and 1 additional component

#+NAME: filter
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  cat mylog | lk filter ::/my/example:* | lk pktf "[hash:str] [spacename:str]"
#+END_SRC

Points are addressable by their hash.
To reference one point from another you add a link. 
Each link is a 16 byte tag and 32 byte hash value.
Tags can be anything. If less than 16 bytes are supplied it is left-padded with 0's.

#+NAME: links
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  HASH=($(cat mylog | lk pktf [hash:str]))
  lk point "::/my/example/link" -- "my first link:${HASH[0]}" "other link:Yrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk" >> mylog
#+END_SRC

You can get fancy with `pktf` and `xargs`.

#+NAME: links-xargs
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  cat mylog | lk pktf "mytag:[hash:str]" | xargs lk point ::/my/example/link -- >> mylog
#+END_SRC

A tool like `lk collect` has a few additional options for building points linking to other points.
However, the `lk` binary is meant to do simple things.
Use the library and a better programming language when doing non-trivial stuff.

#+BEGIN_HTML
<details>
<summary>
Click here to see a graphical representation of mylog
</summary>
#+END_HTML

#+name: make-dot
#+BEGIN_SRC bash :session codeorg :exports none :results output verbatim :cache yes
lk p --pkts ./mylog '"p[hash:str]"\[label=" { <hash> [hash/2mini] }  | { signed: [pubkey/2mini] | [spacename:str] } | data=[data] | [links_len:str] links [/links: | <[i:str]> [tag:str]\: [ptr/2mini] ] "\];
     [/links: "p[hash:str]"\:[i:str] -> "p[ptr:str]"\:hash ;\n ]' ;
#+END_SRC

#+RESULTS[90d11a7c87fa683025d6aa42b5b58bed48095fed]: make-dot
#+begin_example
"pYrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk"[label=" { <hash> Yrs7iz::Tk }  | { signed: AAAAAA::AA |  } | data=Hello, Sol!
 | 0 links  "];
     
"pc77MvXKMDwHuw2DNSa57pW6byDx-CFKC71kJ_jZrp34"[label=" { <hash> c77MvX::34 }  | { signed: AAAAAA::AA | /my/example/spacename } | data=some data | 0 links  "];
     
"pG-soA9GJ-8GPPyqY3EH6ltNspmmxJ86hoeN1ZP-GikQ"[label=" { <hash> G-soA9::kQ }  | { signed: AAAAAA::AA | /my/example/other_spacename } | data= | 0 links  "];
     
"pkf3qA7I94kYzgkG6MDdUMBXKUbXuoXUQbndWhGLvcBo"[label=" { <hash> kf3qA7::Bo }  | { signed: tb0anw::W4 | /my/example/spacename/subspacename } | data= | 0 links  "];
     
"pLtlNcYXCdWAzRCXwMrPw0d8Jr6k4p8CXuxF1g13PjLY"[label=" { <hash> LtlNcY::LY }  | { signed: AAAAAA::AA | /my/example/link } | data= | 2 links  | <0> my first link: Yrs7iz::Tk  | <1> other link: Yrs7iz::Tk  "];
      "pLtlNcYXCdWAzRCXwMrPw0d8Jr6k4p8CXuxF1g13PjLY":0 -> "pYrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk":hash ;
  "pLtlNcYXCdWAzRCXwMrPw0d8Jr6k4p8CXuxF1g13PjLY":1 -> "pYrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk":hash ;
 
"pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo"[label=" { <hash> RCBO18::To }  | { signed: AAAAAA::AA | /my/example/link } | data= | 5 links  | <0> mytag: Yrs7iz::Tk  | <1> mytag: c77MvX::34  | <2> mytag: G-soA9::kQ  | <3> mytag: kf3qA7::Bo  | <4> mytag: LtlNcY::LY  "];
      "pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo":0 -> "pYrs7iz3VznXh-ogv4aM62VmMNxXFiT4P24tIfVz9sTk":hash ;
  "pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo":1 -> "pc77MvXKMDwHuw2DNSa57pW6byDx-CFKC71kJ_jZrp34":hash ;
  "pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo":2 -> "pG-soA9GJ-8GPPyqY3EH6ltNspmmxJ86hoeN1ZP-GikQ":hash ;
  "pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo":3 -> "pkf3qA7I94kYzgkG6MDdUMBXKUbXuoXUQbndWhGLvcBo":hash ;
  "pRCBO18gQylfbhpL-x7mmJK48mHU0cvGowqMDAdBXbTo":4 -> "pLtlNcYXCdWAzRCXwMrPw0d8Jr6k4p8CXuxF1g13PjLY":hash ;
 
"pmAXVJpE8ZCrTjZF40QI7LLH0Ss-_wEjxUlZt0Pm6fhU"[label=" { <hash> mAXVJp::hU }  | { signed: AAAAAA::AA |  } | data=hello world
 | 0 links  "];
#+end_example

#+NAME: graph-mylog
#+BEGIN_SRC dot :file images/mylog-dot.svg :var input=make-dot :exports results :cache yes
  digraph G{
  rankdir=RL ;
  node[shape="record"] ;
   $input
 }
#+END_SRC

#+RESULTS[cbf22962d88abcdb1aafdfd83b79d0975e5ddfec]: graph-mylog
[[file:images/mylog-dot.svg]]


#+BEGIN_HTML
</details>
#+END_HTML

Creating packets with `lk point` detects what kind you're trying to build.
But it is better to be explicit. The 3 types of points are:
`datapoint`, `linkpoint`, or `keypoint` (a signed linkpoint).

NOTE: linkpoint and keypoint do not read data from stdin by default.

#+NAME: point-stdin
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  echo somedata | lk linkpoint ::/my/other_spacename --data-stdin | lk pktf "[hash:str] = [data]"
#+END_SRC


*** Database

Linkspace is primarily its packet format.
Using the database is optional.

The database and other tools exists to make it easier to build complex systems and packet flows.

#+NAME: db-init
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  export LK_DIR=/tmp/linkspace ; 
  lk init ; 
  cat mylog | lk save > /dev/null ; 
#+END_SRC

Instead of using `save` you can set a write destinations directly.

#+NAME: write
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  echo hello world | lk point --write db --write file:mylog --write stdout | lk pktf [data]
#+END_SRC

The database has three indices. 
A 'log', 'hash', and the 'tree' index. 
The log-index is ordered by receive order, the hash-index by the point hash, and the tree-index primarily by a point's [spacename, create stamp] (see the guide for full details).

The database is always accessed through the runtime. 
The runtime lets multiple processes/threads can read, write, and watch for new points.

The library API uses callbacks and a user-driven eventloop ([[./docs/guide/index.html#runtime][guide]]).
`lk` is focused on piping packets.
Commands are `watch-log`, `watch-tree`, `watch-hash`. These are shorthand for  `watch --mode ..`.

#+NAME: watchtree
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk watch-tree ::/my:** | lk pktf "[spacename:str]" > ./watching &
#+END_SRC
#+BEGIN_SRC bash :session codeorg :exports none
  sleep 1
#+END_SRC
#+NAME: react
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  cat ./watching
#+END_SRC

Adding a new point

#+NAME: watch-write
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk linkpoint ::/my/my/my --write db
#+END_SRC
#+BEGIN_SRC bash :session codeorg :exports none
  sleep 1
#+END_SRC

Wakes the watching threads to output the new point.

#+NAME: react2
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  cat ./watching
#+END_SRC

#+BEGIN_SRC bash :session codeorg :exports none
  kill %%
  sleep 1
#+END_SRC


*** Applications

There are two optional fields included in the hash not yet shown. 
The domain and group.

The domain is analogous to a IP port. 
An application pick a domain name (max 16 bytes).
For example `imageboard`.

#+BEGIN_VERSE
`pktf` is common enough to have the alias `lk p`.
#+END_VERSE

#+NAME: domain
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk linkpoint imageboard:: | lk p "[domain:str]"
#+END_SRC

Groups indicate the set of intended recipients.
If a group exchange process is running, an application doesn't have to deal with sockets, (HTTP) endpoints, or other IO except for the user interface.
The application can read, write, request from the group, and process packets using just the linkspace library. 

Building an application is done by mapping an application state to and from linkspace packets (in the database).
For example, a drawing application where multiple people can paint to a shared image board.
A simple mapping could be: 

- Images data are saved as data points
- Every link in a linkpoint is: a hash to an image, and a tag holding (x,y) coordinates.

Adding an image might look something like: 

#+NAME: tuxpng
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  X=30 ; Y=200 ; IMG="https://upload.wikimedia.org/wikipedia/commons/3/35/Tux.svg" ; 
  curl -s $IMG | lk datapoint > tux.pkt
  IMG_HASH=$(cat tux.pkt | lk p "[hash:str]")
  lk linkpoint imageboard:: -- $(printf "%08d%08d" "$X" "$Y"):$IMG_HASH >> tux.pkt
  lk save --pkts ./tux.pkt # Instead of `cat` we can provide a file
#+END_SRC

Building an image requires the program to watch for new packets in `imageboard::`, and on every (new) point draw over the image.

#+name: watch-tree
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
 lk watch-tree "imageboard::" --max 1 \
    | lk p "[hash:str] has the links:\n [links]" 
#+END_SRC

#+BEGIN_VERSE
You should always quote your arguments.
Otherwise, the previous example would not have worked.
Without the quotes the characters `[lin` in "[links]" would be interpreted by the default bash shell.
#+END_VERSE

A link might reference a point that is not (yet) available on the device.
An application has to decide how to handle the situation.
In this example we'll just wait. 
Waiting can be done manually. e.g.

#+name: watch-tree-links
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
 lk watch-tree "imageboard::" --max 1 \
    | lk p "[links]" \
    | cut -d':' -f2 \
    | xargs -i lk watch-hash "{}" \
    | lk pktf "got point [hash:str] which has [data_size:str] bytes"
#+END_SRC

Or use `lk get-links`. It has a few common strategies.

#+name: get-links
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
      lk watch-tree "imageboard::" --max 1 \
          | lk get-links pause \
          | lk pktf "[hash:str]"
#+END_SRC

To complete the imageboard application we'll have to add a few more steps to merge the data into a single picture.
See the tutorial for an example on doing this and more. 

The final piece of the puzzle is the group field. 
A group is 32 bytes to signal the intended set of recipients. 
It is orthogonal to the domain field, as the application should not care which group its running in.

#+name: group
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  PUB=$(echo "Hello, Sol!" | lk data | lk pktf "[hash:str]")
  lk linkpoint :$PUB:/example | lk p "[group:str]"
#+END_SRC

If no group is specified (like we've been doing) the public group is used.

#+name: group-str
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk linkpoint :[#:pub]:/example  | lk p "[group:str]" 
#+END_SRC

#+BEGIN_VERSE
See [[./docs/guide/index.html#ABE][ABE]] for more on the `[..]` syntax. 
Its a small byte templating language included in the library for convenience with the syntax being the same for all programming language.
ABE is also heavily used for CLI arguments, e.g. `lk linkpoint :: --stamp [now]` or `[now:+2h]`
#+END_VERSE

The other special group is `[0;32]`, also called the private group.
You can refer to it with the expression `[#:0]`.
Functions/subcommands that read/write existing points skip and/or warn whenever a point from the private group is seen unless enabled with `--private`.

#+name: private
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk linkpoint domain:[#:0] | lk save 2>&1 # creating a packet is ok - but receving is not accepted by `lk save` without --private
#+END_SRC

A system to exchange points in a group can be made from scratch.
Linkspace does not prescribe a way to do so.
Each group / network is different, and no single solution can cover every situation.

For example, use `lk watch imageboard:$MYGROUP | ...` and forward the entire stream to another device using netcat/socat, ssh, email, http, a USB stick,
or other way to exchange bytes. 

Linkspace is designed to only ever be a streams of packets,
without additional overhead of a (custom) serialization formats. 
As evident by the 'mylog' file we have used thus far.
This keeps streams compatible with all tools that process streams.

To that end, each packet has a mutable header excluded from the hash. 

Filters work on these mutable bytes as well.
This let you quickly build specific network topologies.

#+BEGIN_VERSE
See [[./docs/guide/index.html#mutable][the guide]] for the mutable field names.
#+END_VERSE

#+name: exchange
#+BEGIN_SRC
  netcat 10.0.0.1 -p 6000 | lk route ubits0:=:0000 | lk save & # get packets from a host and set their ubits0 to 0000
  netcat 10.0.2.0 -p 6000 | lk route ubits0:=:0001 | lk save & # get packets from another host and set their ubits0 to 0001
  lk linkpoint example::/hello | lk route ubits0:=:0002 | lk save # save my packets with ubits 0002
  lk watch-log --asc example::/hello -- "ubits0:>:0000" | nc 10.0.0.1 -p 6000  & # forward all packets with ubits0 higher than 0000 back to host. 
#+END_SRC

A single linkspace instance can be used by multiple applications on device, and connect to others.
To that end there are some conventions.
These are functions that create/watch for point with some predefined spacename, links, and data format.
Conventions enable interoperability between multiple applications and background processes.

One such convention is the `pull` convention. This writes a query as a specific point.

#+name: pull
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk pull imageboard:: --write stdout | lk p "[spacename:str]\n\n[data]"
#+END_SRC

The goal of `pull` is to allow one process, e.g. an application like [[./docs/tutorial/imageboard.html][imageboard (bash)]] or [[./docs/tutorial/mineweeper-1.html][mineweeper (python)]]
to signal another process, e.g. a group exchange process like  [[./docs/tutorial/bash.exchange.html][bash.exchange]],
that it wants packets matching a query from the group.

Queries define a 'set of points' in linkspace.
The `filter` and `watch` commands are syntax sugar over queries.
You can add `--print-query` to those commands to see the query used.

Queries are designed such that joining two query strings the result is the common subset of both or an error if the union is empty.

#+name: q1
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk print-query example::/ok 
#+END_SRC
#+name: q2
#+BEGIN_SRC bash :session codeorg :exports both :results output verbatim
  lk print-query example::/ok -- "spacename:=:/not_ok"
#+END_SRC

That's it for this quick introduction.
Some notes on high level algorithm [[https://www.linkspace.dev/docs/tutorial/application-design.html][design]] are worth a read.  
For a more in-depth technical guide or the library API see the [[./docs/guide/index.html][Guide]].
